sim_data2$comparison <- sub(pattern = "vs.", replacement = "and", x=sim_data2$comparison)
morisita_horn <- ggplot(sim_data2, aes(x=abs_lat, y=Estimate, shape=comparison, colour=comparison)) +
geom_errorbar(position=position_dodge(width=0.5), aes(ymin=lci, ymax=uci), width=.2) +
geom_point(position=position_dodge(width=0.5), size=5)  + ylim(0,1) +
labs(y = "Compositional similarity", x = "Samples (by absolute Latitude)") +
theme_bw() +
theme(axis.text=element_text(size=20, colour = "black"),
axis.title=element_text(size=22, colour = "black"),
legend.text = element_text(size=20, colour = "black"),
legend.title = element_text(size=20, colour = "black"),
legend.position = c(0.25, 0.15),
legend.background = element_rect(linetype="solid", size = 0.4, colour ="black")) +
scale_color_manual(values=c("#a6611a", "#018571","#999999")) +
scale_shape_manual(values=c(19, 15, 17)) +
#scale_y_continuous(breaks = seq(0,1,0.25),limits=c(0,1), expand = c(0.02, 0)) +
scale_x_discrete(labels=c(expression("1"*degree),
expression("8"*degree),
expression("16"*degree),
expression("20"*degree),
expression("21"*degree),
expression("24"*degree),
expression("27"*degree),
expression("40"*degree),
expression("50"*degree)))
pdf(file = "fig_morisita-horn.pdf", width=9, height=6, paper = "special")
print(morisita_horn)
dev.off()
library(ggplot2)
sim_data2$comparison <- sub(pattern = "vs.", replacement = "and", x=sim_data2$comparison)
morisita_horn <- ggplot(sim_data2, aes(x=abs_lat, y=Estimate, shape=comparison, colour=comparison)) +
geom_errorbar(position=position_dodge(width=0.5), aes(ymin=lci, ymax=uci), width=.2) +
geom_point(position=position_dodge(width=0.5), size=5)  + ylim(0,1) +
labs(y = "Compositional similarity", x = "Samples (by absolute Latitude)") +
theme_bw() +
theme(axis.text=element_text(size=20, colour = "black"),
axis.title=element_text(size=22, colour = "black"),
legend.text = element_text(size=20, colour = "black"),
legend.title = element_text(size=20, colour = "black"),
legend.position = c(0.25, 0.15),
legend.background = element_rect(linetype="solid", size = 0.4, colour ="black")) +
scale_color_manual(values=c("#a6611a", "#018571","#999999")) +
scale_shape_manual(values=c(19, 15, 17)) +
#scale_y_continuous(breaks = seq(0,1,0.25),limits=c(0,1), expand = c(0.02, 0)) +
scale_x_discrete(labels=c(expression("1"*degree),
expression("8"*degree),
expression("16"*degree),
expression("20"*degree),
expression("21"*degree),
expression("24"*degree),
expression("27"*degree),
expression("40"*degree),
expression("50"*degree)))
pdf(file = "fig_morisita-horn.pdf", width=9, height=6, paper = "special")
print(morisita_horn)
dev.off()
# Morista-Horn
sim_data2$comparison <- sub(pattern = "vs.", replacement = "and", x=sim_data2$comparison)
morisita_horn <- ggplot(sim_data2, aes(x=abs_lat, y=Estimate, shape=comparison, colour=comparison)) +
geom_errorbar(position=position_dodge(width=0.5), aes(ymin=lci, ymax=uci), width=.2) +
geom_point(position=position_dodge(width=0.5), size=4.5)  + ylim(0,1) +
labs(y = "Compositional similarity", x = "Samples (by absolute latitude)") +
theme_bw() +
theme(axis.text=element_text(size=20, colour = "black"),
axis.title=element_text(size=22, colour = "black"),
legend.text = element_text(size=18, colour = "black"),
legend.title = element_blank(),
legend.position = c(0.25, 0.15),
legend.background = element_rect(linetype="solid", size = 0.4, colour ="black")) +
scale_color_manual(values=c("#a6611a", "#018571","#999999")) +
scale_shape_manual(values=c(19, 15, 17)) +
#scale_y_continuous(breaks = seq(0,1,0.25),limits=c(0,1), expand = c(0.02, 0)) +
scale_x_discrete(labels=c(expression("1"*degree),
expression("8"*degree),
expression("16"*degree),
expression("20"*degree),
expression("21"*degree),
expression("24"*degree),
expression("27"*degree),
expression("40"*degree),
expression("50"*degree)))
pdf(file = "fig_morisita-horn.pdf", width=9, height=6, paper = "special")
print(morisita_horn)
dev.off()
# Morista-Horn
sim_data2$comparison <- sub(pattern = "vs.", replacement = "and", x=sim_data2$comparison)
morisita_horn <- ggplot(sim_data2, aes(x=abs_lat, y=Estimate, shape=comparison, colour=comparison)) +
geom_errorbar(position=position_dodge(width=0.5), aes(ymin=lci, ymax=uci), width=.2) +
geom_point(position=position_dodge(width=0.5), size=4.5)  + ylim(0,1) +
labs(y = "Compositional similarity", x = "Samples (by absolute latitude)") +
theme_bw() +
theme(axis.text=element_text(size=20, colour = "black"),
axis.title=element_text(size=22, colour = "black"),
legend.text = element_text(size=18, colour = "black"),
legend.title = element_blank(),
legend.position = c(0.25, 0.15),
legend.background = element_rect(linetype="solid", size = 0.4, colour ="black")) +
scale_color_manual(values=c("#a6611a", "#018571","#999999")) +
scale_shape_manual(values=c(19, 15, 17)) +
#scale_y_continuous(breaks = seq(0,1,0.25),limits=c(0,1), expand = c(0.02, 0)) +
scale_x_discrete(labels=c(expression("0.7"*degree),
expression("7.6"*degree),
expression("15.6"*degree),
expression("19.6"*degree),
expression("21.2"*degree),
expression("24.3"*degree),
expression("26.9"*degree),
expression("40.4"*degree),
expression("50"*degree)))
pdf(file = "fig_morisita-horn.pdf", width=9, height=6, paper = "special")
print(morisita_horn)
dev.off()
getRversion()
# Created by Marina Costa Rillo in 05/July/2018
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/PhD/Projects")
setwd("./buckley-bias/short_paper")
# Libraries
library(reshape)
library(geosphere)
library(SpadeR)
library(ggplot2)
# Auxiliary functions
find_neighbours <- function(point, findin, distance) { # vector, data.frame, numeric
## point: vector of two numbers (longitude, latitude)
## findin: a matrix of 2 columns (first one is longitude, second is latitude)
## distance: if 0 finds nearest neighbour, if a positive value (in meters) finds neighbours within a circle with the value radius
## Returns a data.frame:
## "row" = the row number of the neighbour in data.frame
## "distance" = the distance between the points
dist_data <- apply(findin, 1, function(x) distCosine(point, x)) #Matrix
if(distance>0) { # find neighbours within radius of distance
neighb <- data.frame(row_findin = which(dist_data<=distance), distance = dist_data[which(dist_data<=distance)])
if(length(neighb[,1])==0) distance = 0
}
if(distance==0) { # find nearest neighbour
neighb <- data.frame(row_findin = which.min(dist_data), distance = min(dist_data))
}
return(neighb)
}
historical <- read.csv("historical_data.csv", header = TRUE)
# Subsetting data to nearest neighbours
holocene_full <- read.csv("ForCenS_woa.csv", header = TRUE)
lgm_full <- read.csv("LGM_MARGO_renamed.csv", header = TRUE)
names(lgm_full)
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/PhD/Projects")
setwd("./buckley-bias/short_paper")
library(reshape)
library(geosphere)
library(SpadeR)
library(ggplot2)
find_neighbours <- function(point, findin, distance) { # vector, data.frame, numeric
## point: vector of two numbers (longitude, latitude)
## findin: a matrix of 2 columns (first one is longitude, second is latitude)
## distance: if 0 finds nearest neighbour, if a positive value (in meters) finds neighbours within a circle with the value radius
## Returns a data.frame:
## "row" = the row number of the neighbour in data.frame
## "distance" = the distance between the points
dist_data <- apply(findin, 1, function(x) distCosine(point, x)) #Matrix
if(distance>0) { # find neighbours within radius of distance
neighb <- data.frame(row_findin = which(dist_data<=distance), distance = dist_data[which(dist_data<=distance)])
if(length(neighb[,1])==0) distance = 0
}
if(distance==0) { # find nearest neighbour
neighb <- data.frame(row_findin = which.min(dist_data), distance = min(dist_data))
}
return(neighb)
}
historical <- read.csv("historical_data.csv", header = TRUE)
holocene_full <- read.csv("ForCenS_woa.csv", header = TRUE)
lgm_full <- read.csv("LGM_MARGO_renamed.csv", header = TRUE)
if (!file.exists("ForCenS_subset.csv") | !file.exists("LGM_subset.csv")){
lgm <- data.frame()
holocene <- data.frame()
for (i in 1 : nrow(historical)){
point <- as.numeric(historical[i,c("Long","Lat")])
lgm_neighb <- find_neighbours(point, findin = lgm_full[,c("Long","Lat")], distance = 0)
lgm <- rbind(lgm, cbind(sample = historical$sample[i], lgm_neighb, lgm_full[lgm_neighb$row_findin,]))
holocene_neighb <- find_neighbours(point, findin = holocene_full[,c("Longitude","Latitude")], distance = 0)
holocene <- rbind(holocene, cbind(sample = historical$sample[i], holocene_neighb, holocene_full[holocene_neighb$row_findin,]))
}
write.csv(holocene, "ForCenS_subset.csv", row.names = F)
write.csv(lgm, "LGM_subset.csv", row.names = F)
}else{
holocene <- read.csv("ForCenS_subset.csv", header = TRUE)
lgm <- read.csv("LGM_subset.csv", header = TRUE)
}
names(lgm_full)
nrow(lgm_full)
names(holocene_full)
names(lgm_full)
j=1
forcens_lgm <- data.frame()
point <- as.numeric(lgm_full[j,c("Long","Lat")])
forcens_neighb <- find_neighbours(point, findin = holocene_full[,c("Longitude","Latitude")], distance = 0)
forcens_lgm <- rbind(forcens_lgm, cbind(lgm_row = j, forcens_neighb, holocene_full[forcens_neighb$row_findin,]))
forcens_lgm
j=2
point <- as.numeric(lgm_full[j,c("Long","Lat")])
forcens_neighb <- find_neighbours(point, findin = holocene_full[,c("Longitude","Latitude")], distance = 0)
forcens_lgm <- rbind(forcens_lgm, cbind(lgm_row = j, forcens_neighb, holocene_full[forcens_neighb$row_findin,]))
forcens_lgm
point
forcens_lgm <- data.frame()
for(j in 1:nrow(lgm_full)){
point <- as.numeric(lgm_full[j,c("Long","Lat")])
forcens_neighb <- find_neighbours(point, findin = holocene_full[,c("Longitude","Latitude")], distance = 0)
forcens_lgm <- rbind(forcens_lgm, cbind(lgm_row = j, lgm_long = point[1], lgm_lat = point[2],
forcens_neighb, holocene_full[forcens_neighb$row_findin,]))
}
head(forcens_lgm)
names(holocene)
names(forcens_lgm)
names(lgm_full)
holocene_species <- (forcens_lgm[27:71]/rowSums(forcens_lgm[27:71], na.rm = T))*100; rowSums(holocene_species, na.rm=T)
lgm_species <- (lgm_full[17:54]/rowSums(lgm_full[17:54], na.rm = T))*100; rowSums(lgm_species, na.rm=T)
which(rowSums(holocene_species, na.rm=T)!=100)
holocene_species
which(as.numeric(colSums(holocene_species, na.rm = T))==0)
which(as.numeric(colSums(lgm_species, na.rm = T))==0)
holocene_species <- holocene_species[,-which(as.numeric(colSums(holocene_species, na.rm = T))==0)]
lgm_species <- lgm_species[,-which(as.numeric(colSums(lgm_species, na.rm = T))==0)]
holocene_species[which(!is.na(holocene_species$Globorotalia_menardii_._Globorotalia_tumida)), c("Globorotalia_menardii","Globorotalia_tumida")] <- rep(holocene_species[which(!is.na(holocene_species$Globorotalia_menardii_._Globorotalia_tumida)), c("Globorotalia_menardii_._Globorotalia_tumida")]/2,2)
lgm_species[which(!is.na(lgm_species$Globorotalia_menardii_._Globorotalia_tumida)), c("Globorotalia_menardii","Globorotalia_tumida")] <- rep(lgm_species[which(!is.na(lgm_species$Globorotalia_menardii_._Globorotalia_tumida)), c("Globorotalia_menardii_._Globorotalia_tumida")]/2,2)
holocene_species <- holocene_species[,-which(colnames(holocene_species)=="Globorotalia_menardii_._Globorotalia_tumida")]
lgm_species <- lgm_species[,-which(colnames(lgm_species)=="Globorotalia_menardii_._Globorotalia_tumida")]
which(!is.na(lgm_species$Globorotalia_menardii_._Globorotalia_tumida))
lgm_species$Globorotalia_menardii_._Globorotalia_tumida
lgm_species
lgm_species <- (lgm_full[17:54]/rowSums(lgm_full[17:54], na.rm = T))*100
lgm_species
lgm_species[,-which(as.numeric(colSums(lgm_species, na.rm = T))==0)]
which(as.numeric(colSums(lgm_species, na.rm = T))==0)
holocene_species <- holocene_species[,-which(as.numeric(colSums(holocene_species, na.rm = T))==0)]
holocene_species[,-which(as.numeric(colSums(holocene_species, na.rm = T))==0)]
# Calculating relative abundance
holocene_species <- (forcens_lgm[27:71]/rowSums(forcens_lgm[27:71], na.rm = T))*100
lgm_species <- (lgm_full[17:54]/rowSums(lgm_full[17:54], na.rm = T))*100
holocene_species[,-which(as.numeric(colSums(holocene_species, na.rm = T))==0)]
lgm_species[,-which(as.numeric(colSums(lgm_species, na.rm = T))==0)]
holocene_species[which(!is.na(holocene_species$Globorotalia_menardii_._Globorotalia_tumida)), c("Globorotalia_menardii","Globorotalia_tumida")] <- rep(holocene_species[which(!is.na(holocene_species$Globorotalia_menardii_._Globorotalia_tumida)), c("Globorotalia_menardii_._Globorotalia_tumida")]/2,2)
lgm_species[which(!is.na(lgm_species$Globorotalia_menardii_._Globorotalia_tumida)), c("Globorotalia_menardii","Globorotalia_tumida")] <- rep(lgm_species[which(!is.na(lgm_species$Globorotalia_menardii_._Globorotalia_tumida)), c("Globorotalia_menardii_._Globorotalia_tumida")]/2,2)
holocene_species <- holocene_species[,-which(colnames(holocene_species)=="Globorotalia_menardii_._Globorotalia_tumida")]
lgm_species <- lgm_species[,-which(colnames(lgm_species)=="Globorotalia_menardii_._Globorotalia_tumida")]
lgm_species[, "Turborotalita_humilis"] <- rowSums(data.frame(lgm_species[, "Turborotalita_humilis"],lgm_species[, "Turborotalita_humilis_._Berggrenia_pumilio"]), na.rm = T)
lgm_species <- lgm_species[,-which(colnames(lgm_species)=="Turborotalita_humilis_._Berggrenia_pumilio")]
holocene_species <- holocene_species[,-which(colnames(holocene_species)=="unidentified")]
lgm_species <- lgm_species[,-which(colnames(lgm_species)=="unidentified")]
sort(names(holocene_species))
sort(names(lgm_species))
holocene_species$Dentigloborotalia_anfracta <- 0
lgm_species$Globigerinella_adamsi <- 0
lgm_species$Hastigerinella_digitata <- 0
data.frame(sort(names(holocene_species)), sort(names(lgm_species)))
sort(names(holocene_species))
sort(names(lgm_species))
### For plot of forcens_lgm
# Calculating relative abundance
holocene_species <- (forcens_lgm[27:71]/rowSums(forcens_lgm[27:71], na.rm = T))*100
lgm_species <- (lgm_full[17:54]/rowSums(lgm_full[17:54], na.rm = T))*100
holocene_species[,which(as.numeric(colSums(holocene_species, na.rm = T))==0)]
holocene_species[1,which(as.numeric(colSums(holocene_species, na.rm = T))==0)]
holocene_species <- holocene_species[,-which(as.numeric(colSums(holocene_species, na.rm = T))==0)]
holocene_species[1,which(as.numeric(colSums(holocene_species, na.rm = T))==0)]
holocene_species
holocene_species[which(!is.na(holocene_species$Globorotalia_menardii_._Globorotalia_tumida)), c("Globorotalia_menardii","Globorotalia_tumida")] <- rep(holocene_species[which(!is.na(holocene_species$Globorotalia_menardii_._Globorotalia_tumida)), c("Globorotalia_menardii_._Globorotalia_tumida")]/2,2)
lgm_species[which(!is.na(lgm_species$Globorotalia_menardii_._Globorotalia_tumida)), c("Globorotalia_menardii","Globorotalia_tumida")] <- rep(lgm_species[which(!is.na(lgm_species$Globorotalia_menardii_._Globorotalia_tumida)), c("Globorotalia_menardii_._Globorotalia_tumida")]/2,2)
holocene_species <- holocene_species[,-which(colnames(holocene_species)=="Globorotalia_menardii_._Globorotalia_tumida")]
lgm_species <- lgm_species[,-which(colnames(lgm_species)=="Globorotalia_menardii_._Globorotalia_tumida")]
lgm_species[, "Turborotalita_humilis"]
lgm_species[, "Turborotalita_humilis"] <- rowSums(data.frame(lgm_species[, "Turborotalita_humilis"],lgm_species[, "Turborotalita_humilis_._Berggrenia_pumilio"]), na.rm = T)
lgm_species <- lgm_species[,-which(colnames(lgm_species)=="Turborotalita_humilis_._Berggrenia_pumilio")]
# (3) unidentified
holocene_species <- holocene_species[,-which(colnames(holocene_species)=="unidentified")]
lgm_species <- lgm_species[,-which(colnames(lgm_species)=="unidentified")]
names(holocene_species)
names(lgm_species)
sort(names(lgm_species))
sort(names(holocene_species))
holocene_species[, "Turborotalita_humilis"] <- rowSums(data.frame(holocene_species[, "Turborotalita_humilis"],holocene_species[, "Turborotalita_humilis_._Berggrenia_pumilio"]), na.rm = T)
holocene_species <- holocene_species[,-which(colnames(holocene_species)=="Turborotalita_humilis_._Berggrenia_pumilio")]
sort(names(holocene_species))
sort(names(lgm_species))
holocene_species <- holocene_species[,-which(colnames(holocene_species)=="Globorotalia_cavernula")]
sort(names(holocene_species))
sort(names(lgm_species))
### For plot of forcens_lgm
# Calculating relative abundance
holocene_species <- (forcens_lgm[27:71]/rowSums(forcens_lgm[27:71], na.rm = T))*100
lgm_species <- (lgm_full[17:54]/rowSums(lgm_full[17:54], na.rm = T))*100
# Removing species that did not occur
holocene_species <- holocene_species[,-which(as.numeric(colSums(holocene_species, na.rm = T))==0)]
# lg
holocene_species[which(!is.na(holocene_species$Globorotalia_menardii_._Globorotalia_tumida)), c("Globorotalia_menardii","Globorotalia_tumida")] <- rep(holocene_species[which(!is.na(holocene_species$Globorotalia_menardii_._Globorotalia_tumida)), c("Globorotalia_menardii_._Globorotalia_tumida")]/2,2)
lgm_species[which(!is.na(lgm_species$Globorotalia_menardii_._Globorotalia_tumida)), c("Globorotalia_menardii","Globorotalia_tumida")] <- rep(lgm_species[which(!is.na(lgm_species$Globorotalia_menardii_._Globorotalia_tumida)), c("Globorotalia_menardii_._Globorotalia_tumida")]/2,2)
holocene_species <- holocene_species[,-which(colnames(holocene_species)=="Globorotalia_menardii_._Globorotalia_tumida")]
lgm_species <- lgm_species[,-which(colnames(lgm_species)=="Globorotalia_menardii_._Globorotalia_tumida")]
lgm_species[, "Turborotalita_humilis"] <- rowSums(data.frame(lgm_species[, "Turborotalita_humilis"],lgm_species[, "Turborotalita_humilis_._Berggrenia_pumilio"]), na.rm = T)
lgm_species <- lgm_species[,-which(colnames(lgm_species)=="Turborotalita_humilis_._Berggrenia_pumilio")]
# (3) unidentified
holocene_species <- holocene_species[,-which(colnames(holocene_species)=="unidentified")]
lgm_species <- lgm_species[,-which(colnames(lgm_species)=="unidentified")]
#### forcens_lgm
holocene_species[, "Turborotalita_humilis"] <- rowSums(data.frame(holocene_species[, "Turborotalita_humilis"],holocene_species[, "Turborotalita_humilis_._Berggrenia_pumilio"]), na.rm = T)
holocene_species <- holocene_species[,-which(colnames(holocene_species)=="Turborotalita_humilis_._Berggrenia_pumilio")]
holocene_species <- holocene_species[,-which(colnames(holocene_species)=="Globorotalia_cavernula")]
sort(names(holocene_species))
sort(names(lgm_species))
lgm_species$Hastigerina_pelagica <- 0
data.frame(sort(names(holocene_species)), sort(names(lgm_species)))
nrow(holocene_species)
nrow(lgm_species)
holocene_species[is.na(holocene_species)] <- 0
lgm_species[is.na(lgm_species)] <- 0
head(holocene_species)
head(lgm_species)
paste(1:nrow(holocene_species),"_holocene", sep="")
paste(1:nrow(lgm_species),"_lgm", sep="")
holocene_species$sample <- paste(1:nrow(holocene_species),"_holocene", sep="")
lgm_species$sample <- paste(1:nrow(lgm_species),"_lgm", sep="")
forcens_lgm <- rbind(holocene_species,lgm_species)
forcens_lgm <- melt(forcens_lgm, id = "sample")
forcens_lgm <- cast(forcens_lgm, variable~sample)
forcens_lgm <- forcens_lgm[,-grep(names(forcens_lgm), pattern = "A66")] # SimilarityPair can only be calculated for assemblages with more than ONE species
row.names(forcens_lgm) <- forcens_lgm$variable
forcens_lgm <- forcens_lgm[,-which(names(forcens_lgm)=="variable")]
head(forcens_lgm)
forcens_lgm <- rbind(holocene_species,lgm_species)
head(forcens_lgm)
forcens_lgm <- melt(forcens_lgm, id = "sample")
head(forcens_lgm)
forcens_lgm <- cast(forcens_lgm, variable~sample)
head(forcens_lgm)
row.names(forcens_lgm)
forcens_lgm$variable
row.names(forcens_lgm) <- forcens_lgm$variable
head(forcens_lgm)
names(forcens_lgm)
which(names(forcens_lgm)=="variable")
forcens_lgm[1:10,1:10]
forcens_lgm <- forcens_lgm[,-which(names(forcens_lgm)=="variable")]
forcens_lgm[1:10,1:10]
?SimilarityPair
forcens_lgm[1:10,1:10]
paste(1:nrow(lgm_species),"_", sep="")
sim_samples <- paste(1:nrow(lgm_species),"_", sep="") # SimilarityPair can only be calculated for assemblages with more than ONE species
sim_null <- data.frame()
i = sim_samples[1]
sim_null_data <- forcens_lgm[,grep(names(forcens_lgm), pattern = i)]
sim_null_data
i = 1
forcens_lgm[,grep(names(forcens_lgm), pattern = paste(i, "holocene", sep="_"))]
forcens_lgm[,paste(i, "holocene", sep="_")]
paste(i, "holocene", sep="_")
sim_null_data <- data.frame(forcens_lgm[,paste(i, "holocene", sep="_")],forcens_lgm[,paste(i, "lgm", sep="_")])
sim_null_data
sim_null_data <- data.frame(holocene=forcens_lgm[,paste(i, "holocene", sep="_")],lgm=forcens_lgm[,paste(i, "lgm", sep="_")])
sim_null_data
sim_null_i <- SimilarityPair(as.matrix(sim_null_data), datatype = c("abundance"), nboot = 1)
sim_null_i
sim_null <- rbind(sim_null,
cbind(rbind(c02 = sim_null_i$estimated_richness[1,],
c12 = sim_null_i$estimated_relative[1,],
c22 = sim_null_i$estimated_relative[2,],
chao_jaccard  = sim_null_i$estimated_relative[4,],
chao_sorensen = sim_null_i$estimated_relative[5,]),
sample = rep(i, 5)))
sim_null
sim_null
sim_null <- data.frame()
i = 1
sim_null_data <- data.frame(holocene=forcens_lgm[,paste(i, "holocene", sep="_")],lgm=forcens_lgm[,paste(i, "lgm", sep="_")])
sim_null_i <- SimilarityPair(as.matrix(sim_null_data), datatype = c("abundance"), nboot = 1)
sim_null <- rbind(sim_null, cbind(c22 = sim_null_i$estimated_relative[2,], sample = rep(i, 5)))
sim_null <- data.frame()
i = 1
sim_null_data <- data.frame(holocene=forcens_lgm[,paste(i, "holocene", sep="_")],lgm=forcens_lgm[,paste(i, "lgm", sep="_")])
sim_null_i <- SimilarityPair(as.matrix(sim_null_data), datatype = c("abundance"), nboot = 1)
sim_null_data
sim_null_i
sim_null_i$estimated_relative[2,]
sim_null <- rbind(sim_null, cbind(c22 = sim_null_i$estimated_relative[2,], sample =i))
sim_null
# Analysis
sim_samples <- paste(1:nrow(lgm_species),"_", sep="") # SimilarityPair can only be calculated for assemblages with more than ONE species
sim_null <- data.frame()
for (i in 1:nrow(lgm_species)){ # i = 1
sim_null_data <- data.frame(holocene=forcens_lgm[,paste(i, "holocene", sep="_")],lgm=forcens_lgm[,paste(i, "lgm", sep="_")])
sim_null_i <- SimilarityPair(as.matrix(sim_null_data), datatype = c("abundance"), nboot = 1)
sim_null <- rbind(sim_null, cbind(c22 = sim_null_i$estimated_relative[2,], sample =i))
rm(sim_null_data)
rm(sim_null_i)
}
i
i = 3
sim_null_data <- data.frame(holocene=forcens_lgm[,paste(i, "holocene", sep="_")],lgm=forcens_lgm[,paste(i, "lgm", sep="_")])
sim_null_data
which(sim_null_data[,1]!=0)
length(which(sim_null_data[,1]!=0))
length(which(sim_null_data[,1]!=0))!=1
length(which(sim_null_data[,2]!=0))!=1
sim_null <- data.frame()
i = 3
sim_null_data <- data.frame(holocene=forcens_lgm[,paste(i, "holocene", sep="_")],lgm=forcens_lgm[,paste(i, "lgm", sep="_")])
if(length(which(sim_null_data[,1]!=0))!=1 & length(which(sim_null_data[,2]!=0))!=1)
sim_null_i <- SimilarityPair(as.matrix(sim_null_data), datatype = c("abundance"), nboot = 1)
sim_null <- rbind(sim_null, cbind(c22 = sim_null_i$estimated_relative[2,], sample =i))
rm(sim_null_data)
rm(sim_null_i)
}
i = 3
sim_null_data <- data.frame(holocene=forcens_lgm[,paste(i, "holocene", sep="_")],lgm=forcens_lgm[,paste(i, "lgm", sep="_")])
if(length(which(sim_null_data[,1]!=0))!=1 & length(which(sim_null_data[,2]!=0))!=1){
sim_null_i <- SimilarityPair(as.matrix(sim_null_data), datatype = c("abundance"), nboot = 1)
sim_null <- rbind(sim_null, cbind(c22 = sim_null_i$estimated_relative[2,], sample =i))
rm(sim_null_data)
rm(sim_null_i)
}
sim_null
for (i in 1:nrow(lgm_species)){ # i = 3
sim_null_data <- data.frame(holocene=forcens_lgm[,paste(i, "holocene", sep="_")],lgm=forcens_lgm[,paste(i, "lgm", sep="_")])
if(length(which(sim_null_data[,1]!=0))!=1 & length(which(sim_null_data[,2]!=0))!=1){
sim_null_i <- SimilarityPair(as.matrix(sim_null_data), datatype = c("abundance"), nboot = 1)
sim_null <- rbind(sim_null, cbind(c22 = sim_null_i$estimated_relative[2,], sample =i))
rm(sim_null_data)
rm(sim_null_i)
}
}
i
i = 24
sim_null_data <- data.frame(holocene=forcens_lgm[,paste(i, "holocene", sep="_")],lgm=forcens_lgm[,paste(i, "lgm", sep="_")])
sim_null_data
length(which(sim_null_data[,1]!=0))!=1 & length(which(sim_null_data[,2]!=0))!=1
sim_null_i <- SimilarityPair(as.matrix(sim_null_data), datatype = c("abundance"), nboot = 1)
sim_null
c22 = sim_null_i$estimated_relative[2,]
sim_null_i$estimated_relative[2,]
sim_null <- data.frame()
for (i in 1:nrow(lgm_species)){ # i = 24
sim_null_data <- data.frame(holocene=forcens_lgm[,paste(i, "holocene", sep="_")],lgm=forcens_lgm[,paste(i, "lgm", sep="_")])
if(length(which(sim_null_data[,1]!=0))!=1 & length(which(sim_null_data[,2]!=0))!=1){
sim_null_i <- SimilarityPair(as.matrix(sim_null_data), datatype = c("abundance"), nboot = 1)
sim_null <- rbind(sim_null, cbind(c22 = sim_null_i$estimated_relative[2,1], sample =i))
rm(sim_null_data)
rm(sim_null_i)
}
}
i
sim_null
i = 85
sim_null_data <- data.frame(holocene=forcens_lgm[,paste(i, "holocene", sep="_")],lgm=forcens_lgm[,paste(i, "lgm", sep="_")])
sim_null_data
length(which(sim_null_data[,1]!=0))!=1 & length(which(sim_null_data[,2]!=0))!=
1)
length(which(sim_null_data[,1]!=0))!=1 & length(which(sim_null_data[,2]!=0))!=1
sim_null_i <- SimilarityPair(as.matrix(sim_null_data), datatype = c("abundance"), nboot = 1)
sim_null_i
as.matrix(sim_null_data)
SimilarityPair(as.matrix(sim_null_data), datatype = c("abundance"), nboot = 1)
any(sim_null_data==99.9)
!any(sim_null_data==99.9)
sim_null <- data.frame()
for (i in 1:nrow(lgm_species)){ # i = 85
sim_null_data <- data.frame(holocene=forcens_lgm[,paste(i, "holocene", sep="_")],lgm=forcens_lgm[,paste(i, "lgm", sep="_")])
if(length(which(sim_null_data[,1]!=0))!=1 & length(which(sim_null_data[,2]!=0))!=1 & !any(sim_null_data==99.9)){
sim_null_i <- SimilarityPair(as.matrix(sim_null_data), datatype = c("abundance"), nboot = 1)
sim_null <- rbind(sim_null, cbind(c22 = sim_null_i$estimated_relative[2,1], sample =i))
rm(sim_null_data)
rm(sim_null_i)
}
}
i
sim_null <- data.frame()
i = 2
sim_null_data <- data.frame(holocene=forcens_lgm[,paste(i, "holocene", sep="_")],lgm=forcens_lgm[,paste(i, "lgm", sep="_")])
sim_null_data
length(which(sim_null_data[,1]!=0))!=1 & length(which(sim_null_data[,2]!=0))!=1 & !any(sim_null_data==99.9)
SimilarityPair(as.matrix(sim_null_data), datatype = c("abundance"), nboot = 1)
sim_null_i <- SimilarityPair(as.matrix(sim_null_data), datatype = c("abundance"), nboot = 1)
sim_null <- rbind(sim_null, cbind(c22 = sim_null_i$estimated_relative[2,1], sample =i))
sim_null
sim_null <- data.frame()
for (i in 1:nrow(lgm_species)){ # i = 2
sim_null_data <- data.frame(holocene=forcens_lgm[,paste(i, "holocene", sep="_")],lgm=forcens_lgm[,paste(i, "lgm", sep="_")])
if(length(which(sim_null_data[,1]!=0))!=1 & length(which(sim_null_data[,2]!=0))!=1 & !any(sim_null_data==99.9)){
sim_null_i <- SimilarityPair(as.matrix(sim_null_data), datatype = c("abundance"), nboot = 1)
sim_null <- rbind(sim_null, cbind(c22 = sim_null_i$estimated_relative[2,1], sample =i))
rm(sim_null_data)
rm(sim_null_i)
} # if
} # for
i
i = 24
sim_null_data <- data.frame(holocene=forcens_lgm[,paste(i, "holocene", sep="_")],lgm=forcens_lgm[,paste(i, "lgm", sep="_")])
sim_null_data
length(which(sim_null_data[,1]!=0))!=1 & length(which(sim_null_data[,2]!=0))!=1 & !any(sim_null_data==99.9)
SimilarityPair(as.matrix(sim_null_data), datatype = c("abundance"), nboot = 1)
rbind(sim_null, cbind(c22 = sim_null_i$estimated_relative[2,1], sample =i))
sim_null_i <- SimilarityPair(as.matrix(sim_null_data), datatype = c("abundance"), nboot = 1)
sim_null <- rbind(sim_null, cbind(c22 = sim_null_i$estimated_relative[2,1], sample =i))
sim_null
for (i in 1:nrow(lgm_species)){ # i = 24
sim_null_data <- data.frame(holocene=forcens_lgm[,paste(i, "holocene", sep="_")],lgm=forcens_lgm[,paste(i, "lgm", sep="_")])
if(length(which(sim_null_data[,1]!=0))!=1 & length(which(sim_null_data[,2]!=0))!=1 & !any(sim_null_data==99.9)){
sim_null_i <- SimilarityPair(as.matrix(sim_null_data), datatype = c("abundance"), nboot = 1)
sim_null <- rbind(sim_null, cbind(c22 = sim_null_i$estimated_relative[2,1], sample =i))
rm(sim_null_data)
rm(sim_null_i)
} # if
} # for
x
i
