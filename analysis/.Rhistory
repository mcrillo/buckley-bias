legend.title = element_text(size=14,face="bold"),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(sim_data, aes(x=sample, y=Estimate, shape=timing, colour=timing)) +
geom_point(size=4)  + ylim(0,1) +
geom_errorbar(aes(ymin=lci, ymax=uci, colour = timing), width=.2) +
labs(y = "Assemblage similarity", x = "Resamples") +
scale_shape_discrete(solid=T) +
theme(axis.text=element_text(size=18), #aspect.ratio = 1,
axis.title=element_text(size=18),
legend.text = element_text(size=14),
legend.title = element_text(size=14,face="bold"),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_color_manual(values=c("red", "blue"))
ggplot(sim_data, aes(x=sample, y=Estimate, shape=timing, colour=timing)) +
geom_point(size=4)  + ylim(0,1) +
geom_errorbar(aes(ymin=lci, ymax=uci, colour = timing), width=.2) +
labs(y = "Assemblage similarity", x = "Resamples") +
scale_shape_discrete(solid=T) +
theme(axis.text=element_text(size=18), #aspect.ratio = 1,
axis.title=element_text(size=18),
legend.text = element_text(size=14),
legend.title = element_text(size=14,face="bold"),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_color_manual(values=c("red", "blue")) +
scale_shape_manual(values=c(19, 15))
ggplot(sim_data, aes(x=sample, y=Estimate, shape=timing, colour=timing)) +
geom_point(size=4)  + ylim(0,1) +
geom_errorbar(aes(ymin=lci, ymax=uci, colour = timing), width=.2) +
labs(y = "Assemblage similarity", x = "Resamples") +
scale_shape_discrete(solid=T) +
theme(axis.text=element_text(size=18), #aspect.ratio = 1,
axis.title=element_text(size=18),
legend.text = element_text(size=14),
legend.title = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_color_manual(values=c("red", "blue")) +
scale_shape_manual(values=c(19, 15))
ggplot(sim_data, aes(x=sample, y=Estimate, shape=timing, colour=timing)) +
geom_point(size=4)  + ylim(0,1) +
geom_errorbar(aes(ymin=lci, ymax=uci, colour = timing), width=.5) +
labs(y = "Assemblage similarity", x = "Resamples") +
scale_shape_discrete(solid=T) +
theme(axis.text=element_text(size=18), #aspect.ratio = 1,
axis.title=element_text(size=18),
legend.text = element_text(size=14),
legend.title = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_color_manual(values=c("red", "blue")) +
scale_shape_manual(values=c(19, 15))
ggplot(sim_data, aes(x=sample, y=Estimate, shape=timing, colour=timing)) +
geom_point(size=4)  + ylim(0,1) +
geom_errorbar(aes(ymin=lci, ymax=uci, colour = timing), width=.3) +
labs(y = "Assemblage similarity", x = "Resamples") +
theme(axis.text=element_text(size=18), #aspect.ratio = 1,
axis.title=element_text(size=18),
legend.text = element_text(size=14),
legend.title = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_color_manual(values=c("red", "blue")) +
scale_shape_manual(values=c(19, 15))
ggplot(sim_data, aes(x=sample, y=Estimate, shape=timing, colour=timing)) +
geom_point(size=4)  + ylim(0,1) +
geom_errorbar(aes(ymin=lci, ymax=uci, colour = timing), width=.3) +
labs(y = "Assemblage similarity", x = "Resamples") +
theme(axis.text=element_text(size=18), #aspect.ratio = 1,
axis.title=element_text(size=18),
legend.text = element_text(size=14),
legend.title = element_blank(),
legend.position = c(0.2, 0.2),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_color_manual(values=c("red", "blue")) +
scale_shape_manual(values=c(19, 15))
ggplot(sim_data, aes(x=sample, y=Estimate, shape=timing, colour=timing)) +
geom_point(size=4)  + ylim(0,1) +
geom_errorbar(aes(ymin=lci, ymax=uci, colour = timing), width=.3) +
labs(y = "Assemblage similarity", x = "Resamples") +
theme(axis.text=element_text(size=18), #aspect.ratio = 1,
axis.title=element_text(size=18),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()
legend.text = element_text(size=14),
legend.title = element_blank(),
legend.position = c(0.2, 0.2),
legend.background = element_rect(linetype="solid", colour ="black")) +
scale_color_manual(values=c("red", "blue")) +
scale_shape_manual(values=c(19, 15))
ggplot(sim_data, aes(x=sample, y=Estimate, shape=timing, colour=timing)) +
geom_point(size=4)  + ylim(0,1) +
geom_errorbar(aes(ymin=lci, ymax=uci, colour = timing), width=.3) +
labs(y = "Assemblage similarity", x = "Resamples") +
theme(axis.text=element_text(size=18), #aspect.ratio = 1,
axis.title=element_text(size=18),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.text = element_text(size=14),
legend.title = element_blank(),
legend.position = c(0.2, 0.2),
legend.background = element_rect(linetype="solid", colour ="black")) +
scale_color_manual(values=c("red", "blue")) +
scale_shape_manual(values=c(19, 15))
ggplot(sim_data, aes(x=sample, y=Estimate, shape=timing)) +
geom_point(size=4)  + ylim(0,1) +
geom_errorbar(aes(ymin=lci, ymax=uci, colour = timing), width=.3) +
labs(y = "Assemblage similarity", x = "Resamples") +
theme(axis.text=element_text(size=18), #aspect.ratio = 1,
axis.title=element_text(size=18),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.text = element_text(size=14),
legend.title = element_blank(),
legend.position = c(0.2, 0.2),
legend.background = element_rect(linetype="solid", colour ="black")) +
#scale_color_manual(values=c("red", "blue")) +
scale_shape_manual(values=c(19, 15))
ggplot(sim_data, aes(x=sample, y=Estimate, shape=timing)) +
geom_point(size=4)  + ylim(0,1) +
geom_errorbar(aes(ymin=lci, ymax=uci), width=.3) +
labs(y = "Assemblage similarity", x = "Resamples") +
theme(axis.text=element_text(size=18), #aspect.ratio = 1,
axis.title=element_text(size=18),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.text = element_text(size=14),
legend.title = element_blank(),
legend.position = c(0.2, 0.2),
legend.background = element_rect(linetype="solid", colour ="black")) +
#scale_color_manual(values=c("red", "blue")) +
scale_shape_manual(values=c(19, 15))
sim_data
abs(sim_data$lat)
round(abs(sim_data$lat))
sim_data$abs_lat <- round(abs(sim_data$lat))
order(sim_data$abs_lat)
sim_data <- sim_data[order(sim_data$abs_lat),]
sim_data
sim_data[,"abs_lt"] <- round(abs(simil[,"lat"]))
str(sim_data)
sim_data$abs_lat <- as.factor(sim_data$abs_lat)
str(sim_data)
ggplot(sim_data, aes(x=abs_lat, y=Estimate, shape=timing)) +
geom_point(size=4)  + ylim(0,1) +
geom_errorbar(aes(ymin=lci, ymax=uci), width=.3) +
labs(y = "Assemblage similarity", x = "Resamples (by absolute Latitude") +
theme(axis.text=element_text(size=18), #aspect.ratio = 1,
axis.title=element_text(size=18),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.text = element_text(size=14),
legend.title = element_blank(),
legend.position = c(0.2, 0.2),
legend.background = element_rect(linetype="solid", colour ="black")) +
#scale_color_manual(values=c("red", "blue")) +
scale_shape_manual(values=c(19, 15))
ggplot(sim_data, aes(x=abs_lat, y=Estimate, shape=timing)) +
geom_point(size=4)  + ylim(0,1) +
geom_errorbar(aes(ymin=lci, ymax=uci), width=.3) +
labs(y = "Assemblage similarity", x = "Resamples (by absolute Latitude") +
theme(axis.text=element_text(size=18), #aspect.ratio = 1,
axis.title=element_text(size=18),
#axis.text.x=element_blank(),
# axis.ticks.x=element_blank(),
legend.text = element_text(size=14),
legend.title = element_blank(),
legend.position = c(0.8, 0.2),
legend.background = element_rect(linetype="solid", colour ="black")) +
#scale_color_manual(values=c("red", "blue")) +
scale_shape_manual(values=c(19, 15))
ggplot(sim_data, aes(x=abs_lat, y=Estimate, shape=timing)) +
geom_point(size=4)  + ylim(0,1) +
geom_errorbar(aes(ymin=lci, ymax=uci), width=.3) +
labs(y = "Assemblage similarity", x = "Resamples (by absolute latitude)") +
theme(axis.text=element_text(size=18), #aspect.ratio = 1,
axis.title=element_text(size=18),
#axis.text.x=element_blank(),
# axis.ticks.x=element_blank(),
legend.text = element_text(size=14),
legend.title = element_blank(),
legend.position = c(0.8, 0.2),
legend.background = element_rect(linetype="solid", colour ="black")) +
#scale_color_manual(values=c("red", "blue")) +
scale_shape_manual(values=c(19, 15))
ggplot(sim_data, aes(x=abs_lat, y=Estimate, shape=timing)) +
geom_point(size=4)  + ylim(0,1) +
geom_errorbar(aes(ymin=lci, ymax=uci), width=.3) +
labs(y = "Assemblage similarity", x = "Resamples (by absolute latitude)") +
theme(axis.text=element_text(size=18), #aspect.ratio = 1,
axis.title=element_text(size=18),
#axis.text.x=element_blank(),
# axis.ticks.x=element_blank(),
legend.text = element_text(size=14),
legend.title = element_blank(),
legend.position = c(0.9, 0.1),
legend.background = element_rect(linetype="solid", colour ="black")) +
#scale_color_manual(values=c("red", "blue")) +
scale_shape_manual(values=c(19, 15))
ggplot(sim_data, aes(x=abs_lat, y=Estimate, shape=timing)) +
geom_point(size=4)  + ylim(0,1) +
geom_errorbar(aes(ymin=lci, ymax=uci), width=.3) +
labs(y = "Assemblage similarity", x = "Resamples (by absolute latitude)") +
theme(axis.text=element_text(size=18), #aspect.ratio = 1,
axis.title=element_text(size=18),
#axis.text.x=element_blank(),
# axis.ticks.x=element_blank(),
legend.text = element_text(size=14),
legend.title = element_blank(),
legend.position = c(0.85, 0.15),
legend.background = element_rect(linetype="solid", colour ="black")) +
#scale_color_manual(values=c("red", "blue")) +
scale_shape_manual(values=c(19, 15))
ggplot(sim_data, aes(x=abs_lat, y=Estimate, colour=timing,shape=timing)) +
geom_point(size=4)  + ylim(0,1) +
geom_errorbar(aes(ymin=lci, ymax=uci),colour=timing, width=.3) +
labs(y = "Assemblage similarity", x = "Resamples (by absolute latitude)") +
theme(axis.text=element_text(size=18), #aspect.ratio = 1,
axis.title=element_text(size=18),
#axis.text.x=element_blank(),
# axis.ticks.x=element_blank(),
legend.text = element_text(size=14),
legend.title = element_blank(),
legend.position = c(0.85, 0.15),
legend.background = element_rect(linetype="solid", colour ="black")) +
scale_color_manual(values=c("#bdbdbd", "#3182bd")) +
scale_shape_manual(values=c(19, 15))
str(sim_data)
ggplot(sim_data, aes(x=abs_lat, y=Estimate, colour=timing, shape=timing)) +
geom_point(size=4)  + ylim(0,1) +
geom_errorbar(aes(ymin=lci, ymax=uci), colour=timing, width=.3) +
labs(y = "Assemblage similarity", x = "Resamples (by absolute latitude)") +
theme(axis.text=element_text(size=18), #aspect.ratio = 1,
axis.title=element_text(size=18),
#axis.text.x=element_blank(),
# axis.ticks.x=element_blank(),
legend.text = element_text(size=14),
legend.title = element_blank(),
legend.position = c(0.85, 0.15),
legend.background = element_rect(linetype="solid", colour ="black")) +
scale_color_manual(values=c("#bdbdbd", "#3182bd")) +
scale_shape_manual(values=c(19, 15))
ggplot(sim_data, aes(x=abs_lat, y=Estimate, shape=timing, colour=timing)) +
geom_point(size=4)  + ylim(0,1) +
geom_errorbar(aes(ymin=lci, ymax=uci), width=.3) +
labs(y = "Assemblage similarity", x = "Resamples (by absolute latitude)") +
theme(axis.text=element_text(size=18), #aspect.ratio = 1,
axis.title=element_text(size=18),
#axis.text.x=element_blank(),
# axis.ticks.x=element_blank(),
legend.text = element_text(size=14),
legend.title = element_blank(),
legend.position = c(0.85, 0.15),
legend.background = element_rect(linetype="solid", colour ="black")) +
scale_color_manual(values=c("#bdbdbd", "#3182bd")) +
scale_shape_manual(values=c(19, 15))
ggplot(sim_data, aes(x=abs_lat, y=Estimate, shape=timing, colour=timing)) +
geom_point(size=4)  + ylim(0,1) +
geom_errorbar(aes(ymin=lci, ymax=uci), width=.3) +
labs(y = "Assemblage similarity", x = "Resamples (by absolute latitude)") +
theme(axis.text=element_text(size=18), #aspect.ratio = 1,
axis.title=element_text(size=18),
#axis.text.x=element_blank(),
# axis.ticks.x=element_blank(),
legend.text = element_text(size=14),
legend.title = element_blank(),
legend.position = c(0.85, 0.15),
legend.background = element_rect(linetype="solid", colour ="black")) +
scale_color_manual(values=c("#d8b365", "#5ab4ac")) +
scale_shape_manual(values=c(19, 15))
ggplot(sim_data, aes(x=abs_lat, y=Estimate, shape=timing, colour=timing)) +
geom_point(size=4)  + ylim(0,1) +
geom_errorbar(aes(ymin=lci, ymax=uci), width=.3) +
labs(y = "Assemblage similarity", x = "Resamples (by absolute latitude)") +
theme(axis.text=element_text(size=18), #aspect.ratio = 1,
axis.title=element_text(size=18),
#axis.text.x=element_blank(),
# axis.ticks.x=element_blank(),
legend.text = element_text(size=14),
legend.title = element_blank(),
legend.position = c(0.85, 0.15),
legend.background = element_rect(linetype="solid", colour ="black")) +
scale_color_manual(values=c("#a6611a", "#018571")) +
scale_shape_manual(values=c(19, 15))
simil <- read.csv("output/similarity.csv", header = TRUE, stringsAsFactors = FALSE)
names(simil) <- c("Estimate", "se", "lci", "uci", "sample", "CqN", "lat", "long", "timing")
simil[,"CqN"] <- as.factor(rep(c(0:2), length(simil[,"CqN"])/3))
simil[,"sample"] <- as.factor(simil[,"sample"])
sim_data <- simil[which(simil[,"CqN"] == 1),] # Horn index (relative abundance)
sim_data$abs_lat <- round(abs(sim_data$lat))
sim_data <- sim_data[order(sim_data$abs_lat),]
sim_data$abs_lat <- round(abs(sim_data$lat))
sim_data$abs_lat <- as.factor(sim_data$abs_lat)
ggplot(sim_data, aes(x=abs_lat, y=Estimate, shape=timing, colour=timing)) +
geom_point(size=4)  + ylim(0,1) +
geom_errorbar(aes(ymin=lci, ymax=uci), width=.3) +
labs(y = "Assemblage similarity", x = "Resamples (by absolute latitude)") +
theme(axis.text=element_text(size=18), #aspect.ratio = 1,
axis.title=element_text(size=18),
#axis.text.x=element_blank(),
# axis.ticks.x=element_blank(),
legend.text = element_text(size=14),
legend.title = element_blank(),
legend.position = c(0.85, 0.15),
legend.background = element_rect(linetype="solid", colour ="black")) +
scale_color_manual(values=c("#a6611a", "#018571")) +
scale_shape_manual(values=c(19, 15))
s <- ggplot(sim_data, aes(x=abs_lat, y=Estimate, shape=timing, colour=timing)) +
geom_point(size=4)  + ylim(0,1) +
geom_errorbar(aes(ymin=lci, ymax=uci), width=.3) +
labs(y = "Assemblage similarity", x = "Resamples (by absolute latitude)") +
theme(axis.text=element_text(size=18),
axis.title=element_text(size=18),
#axis.text.x=element_blank(),
#axis.ticks.x=element_blank(),
legend.text = element_text(size=14),
legend.title = element_blank(),
legend.position = c(0.85, 0.15),
legend.background = element_rect(linetype="solid", colour ="black")) +
scale_color_manual(values=c("#a6611a", "#018571")) +
scale_shape_manual(values=c(19, 15))
pdf(file = "output/similarity.pdf", width=8, height=6, paper = "special")
print(s)
dev.off()
pdf(file = "output/manuscript_similarity.pdf", width=8, height=6, paper = "special")
print(s)
dev.off()
############################################################
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/PhD/Projects")
setwd("./buckley-bias/analysis")
# Libraries
source("R/library.R")
# Auxiliary functions
sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
# General data
buckley_measurmts <- read.csv(file=c("data/buckley_measurmts.csv"), header = TRUE, stringsAsFactors = FALSE)
wands_df <- read.csv("data/Wandsworth_loans_MRillo.csv", header = TRUE, stringsAsFactors=FALSE)
resamples_df <- suppressWarnings(get_resamples_info(buckley_measurmts, wands_df, overwrite = T)) # creates: data/resample_info.csv & data/resample_info_morpho.csv
resamp_size_df <- read.csv("data/resample_info_size.csv", header = TRUE, stringsAsFactors=FALSE)
plot_map_resamples(resamples_df, overwrite = FALSE) # creates: output/resamples_map.pdf
##############################
### Assemblage Composition ###
##############################
### Data Holocene
cores10 <- c("#00b900","#0037c6", "#ff7314", "#ff60ff","#86442b","#004d41", "#db0011","#00b5ff","#8000b2", "#d0be00")
forcens_df <- get_forcens_subset(resamples_df,overwrite=FALSE)
# Merging species counts (assemblages) from (A) re-samples , (B) Buckley collection and (C) ForCenS data:
assemb_counts_df <- get_abund_counts(forcens_df, overwrite = FALSE) # creates "data/counts_merged.csv"
assemb_relat_df <- get_abund_relat(forcens_df, overwrite = FALSE) # creates "data/counts_merged_relat.csv
### Analysis Holocene
# Calculating similarity index (based on Chao) for assemblages of Re-sampling X Buckley Collection X ForCenS
assemb_sim_list <- get_assemb_similarity(assemb_counts_df, resamples_df$sample, overwrite = FALSE)
### Plots Holocene
# Histograms of species relative abundances for each datasets (Bias, Buckley, ForCenS), per sample
suppressWarnings(plot_abund_histograms(assemb_relat_df, resamples_df, overwrite = FALSE)) # creates "output/abund_histograms"
# Chao similarity index plot
plot_assemb_similarity(assemb_sim_list, cores10, overwrite = FALSE) # creates "output/assemb_similarity"
### Data LGM
lgm_df <- get_abund_relat_lgm(overwrite=FALSE)
plot_similarity(overwrite=FALSE)
############################################################
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/PhD/Projects")
setwd("./buckley-bias/analysis")
# Libraries
source("R/library.R")
# Auxiliary functions
sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
# General data
buckley_measurmts <- read.csv(file=c("data/buckley_measurmts.csv"), header = TRUE, stringsAsFactors = FALSE)
wands_df <- read.csv("data/Wandsworth_loans_MRillo.csv", header = TRUE, stringsAsFactors=FALSE)
resamples_df <- suppressWarnings(get_resamples_info(buckley_measurmts, wands_df, overwrite = T)) # creates: data/resample_info.csv & data/resample_info_morpho.csv
resamp_size_df <- read.csv("data/resample_info_size.csv", header = TRUE, stringsAsFactors=FALSE)
plot_map_resamples(resamples_df, overwrite = FALSE) # creates: output/resamples_map.pdf
##############################
### Assemblage Composition ###
##############################
### Data Holocene
cores10 <- c("#00b900","#0037c6", "#ff7314", "#ff60ff","#86442b","#004d41", "#db0011","#00b5ff","#8000b2", "#d0be00")
forcens_df <- get_forcens_subset(resamples_df,overwrite=FALSE)
# Merging species counts (assemblages) from (A) re-samples , (B) Buckley collection and (C) ForCenS data:
assemb_counts_df <- get_abund_counts(forcens_df, overwrite = FALSE) # creates "data/counts_merged.csv"
assemb_relat_df <- get_abund_relat(forcens_df, overwrite = FALSE) # creates "data/counts_merged_relat.csv
### Analysis Holocene
# Calculating similarity index (based on Chao) for assemblages of Re-sampling X Buckley Collection X ForCenS
assemb_sim_list <- get_assemb_similarity(assemb_counts_df, resamples_df$sample, overwrite = FALSE)
### Plots Holocene
# Histograms of species relative abundances for each datasets (Bias, Buckley, ForCenS), per sample
suppressWarnings(plot_abund_histograms(assemb_relat_df, resamples_df, overwrite = FALSE)) # creates "output/abund_histograms"
# Chao similarity index plot
plot_assemb_similarity(assemb_sim_list, cores10, overwrite = FALSE) # creates "output/assemb_similarity"
### Data LGM
lgm_df <- get_abund_relat_lgm(overwrite=FALSE)
plot_similarity(overwrite=FALSE)
### Data
# Creates files in data/bias_size_analysis
get_size_data(buckley_measurmts, resamp_size_df, overwrite = F)
# Merges csv files from bias_size_analysis into one data.frame: bias_size_analysis.csv
size_ind_df <- merge_size_data(overwrite = F)
size_pop_df <- get_size_pop_data(size_ind_df, overwrite = F) # summary statistics for each ssp population of size_ind_df
# Re-ordering the factors (species) to be phylogenetically meaningful in the plot (i.e. sister species closer in the plot)
# size_pop_df$species <- factor(size_pop_df$species, levels = c())
### Analysis & Plots
### Individuals
boxplot_size_species(size_ind_df, overwrite = F)
boxplot_size_sample(size_ind_df, overwrite = F)
plot_size_histograms(size_ind_df, overwrite = F)
# test_size_ind(size_ind_df)
### Analysis & Plots
### Populations
transf<- c("log") # "sqrt"
# checking order of sspnames by max area_log_95q, for colours gradient
size <- by(size_pop_df$area_log_95q, size_pop_df$sspname, max)
size <- sort(size, decreasing = TRUE)
# names(size)
# Regression plots (mean, median, 75q, 95q max)
regress <- dcast(size_pop_df, sspname+sample~datasetAB, value.var = paste("area_",transf,"_95q",sep=""))
plot95q <- plot_resid_regression(regress, tranfs, name="95q", overwrite=T)
# Calculates residuals from regression based on 1:1 model
resid_list <- get_size_pop_residuals(size_pop_df, file_name = "size_pop_residuals_allssp", overwrite = F)
# resid_list$stats[which.min(resid_list$stats[,paste("mse_",transf,sep="")]),"rownames"]
# Preparing data for residual plots & plots
res <- melt(as.data.frame(resid_list[[transf]]), id = c("species","sspname","sample")) # warning ok
plot_resid_histogram(res, transf, overwrite = F)
violin <- plot_resid_violin(res, resid_list$stats, transf, overwrite = T)
if (!is.null(violin) & !is.null(plot95q)){
pdf(file = "output/manuscript_ggarrange.pdf", paper = "special", width=15, height=6)
print(ggarrange(violin, plot95q, ncol = 2, nrow = 1, align="h", widths = c(0.45, 0.55),
labels = c("(a)", "(b)"), label.x = c(0,-0.013),
font.label = list(size = 18, color = "black", face = "bold", family = NULL)))
dev.off()}
dev.off()
dev.off()
############################################################
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/PhD/Projects")
setwd("./buckley-bias/analysis")
# Libraries
source("R/library.R")
# Auxiliary functions
sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
# General data
buckley_measurmts <- read.csv(file=c("data/buckley_measurmts.csv"), header = TRUE, stringsAsFactors = FALSE)
wands_df <- read.csv("data/Wandsworth_loans_MRillo.csv", header = TRUE, stringsAsFactors=FALSE)
resamples_df <- suppressWarnings(get_resamples_info(buckley_measurmts, wands_df, overwrite = T)) # creates: data/resample_info.csv & data/resample_info_morpho.csv
resamp_size_df <- read.csv("data/resample_info_size.csv", header = TRUE, stringsAsFactors=FALSE)
plot_map_resamples(resamples_df, overwrite = FALSE) # creates: output/resamples_map.pdf
##############################
### Assemblage Composition ###
##############################
### Data Holocene
cores10 <- c("#00b900","#0037c6", "#ff7314", "#ff60ff","#86442b","#004d41", "#db0011","#00b5ff","#8000b2", "#d0be00")
forcens_df <- get_forcens_subset(resamples_df,overwrite=FALSE)
# Merging species counts (assemblages) from (A) re-samples , (B) Buckley collection and (C) ForCenS data:
assemb_counts_df <- get_abund_counts(forcens_df, overwrite = FALSE) # creates "data/counts_merged.csv"
assemb_relat_df <- get_abund_relat(forcens_df, overwrite = FALSE) # creates "data/counts_merged_relat.csv
### Analysis Holocene
# Calculating similarity index (based on Chao) for assemblages of Re-sampling X Buckley Collection X ForCenS
assemb_sim_list <- get_assemb_similarity(assemb_counts_df, resamples_df$sample, overwrite = FALSE)
### Plots Holocene
# Histograms of species relative abundances for each datasets (Bias, Buckley, ForCenS), per sample
suppressWarnings(plot_abund_histograms(assemb_relat_df, resamples_df, overwrite = FALSE)) # creates "output/abund_histograms"
# Chao similarity index plot
plot_assemb_similarity(assemb_sim_list, cores10, overwrite = FALSE) # creates "output/assemb_similarity"
### Data LGM
lgm_df <- get_abund_relat_lgm(overwrite=FALSE)
plot_similarity(overwrite=FALSE)
#########################
### Size Distribution ###
#########################
### Data
# Creates files in data/bias_size_analysis
get_size_data(buckley_measurmts, resamp_size_df, overwrite = F)
# Merges csv files from bias_size_analysis into one data.frame: bias_size_analysis.csv
size_ind_df <- merge_size_data(overwrite = F)
size_pop_df <- get_size_pop_data(size_ind_df, overwrite = F) # summary statistics for each ssp population of size_ind_df
# Re-ordering the factors (species) to be phylogenetically meaningful in the plot (i.e. sister species closer in the plot)
# size_pop_df$species <- factor(size_pop_df$species, levels = c())
### Analysis & Plots
### Individuals
boxplot_size_species(size_ind_df, overwrite = F)
boxplot_size_sample(size_ind_df, overwrite = F)
plot_size_histograms(size_ind_df, overwrite = F)
# test_size_ind(size_ind_df)
### Analysis & Plots
### Populations
transf<- c("log") # "sqrt"
# checking order of sspnames by max area_log_95q, for colours gradient
size <- by(size_pop_df$area_log_95q, size_pop_df$sspname, max)
size <- sort(size, decreasing = TRUE)
# names(size)
# Regression plots (mean, median, 75q, 95q max)
regress <- dcast(size_pop_df, sspname+sample~datasetAB, value.var = paste("area_",transf,"_95q",sep=""))
plot95q <- plot_resid_regression(regress, tranfs, name="95q", overwrite=T)
# Calculates residuals from regression based on 1:1 model
resid_list <- get_size_pop_residuals(size_pop_df, file_name = "size_pop_residuals_allssp", overwrite = F)
# resid_list$stats[which.min(resid_list$stats[,paste("mse_",transf,sep="")]),"rownames"]
# Preparing data for residual plots & plots
res <- melt(as.data.frame(resid_list[[transf]]), id = c("species","sspname","sample")) # warning ok
plot_resid_histogram(res, transf, overwrite = F)
violin <- plot_resid_violin(res, resid_list$stats, transf, overwrite = T)
!is.null(violin) & !is.null(plot95q)
if (!is.null(violin) & !is.null(plot95q)){
pdf(file = "output/manuscript_ggarrange.pdf", paper = "special", width=15, height=6)
print(ggarrange(violin, plot95q, ncol = 2, nrow = 1, align="h", widths = c(0.45, 0.55),
labels = c("(a)", "(b)"), label.x = c(0,-0.013),
font.label = list(size = 18, color = "black", face = "bold", family = NULL)))
dev.off()}
