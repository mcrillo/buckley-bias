wands_df <- read.csv("data/Wandsworth_loans_MRillo.csv", header = TRUE, stringsAsFactors=FALSE)
morpho_df <- read.csv(file=c("data/all_species_morpho.csv"), header = TRUE)
##########################################
### OBD samples used for bias analysis ###
##########################################
if(file.exists("data/resample_info.csv")){
resamples_df <- read.csv("data/resample_info.csv", header = TRUE)
}else{
source("R/get_resamples_wandsworth.R")
source("R/plot_map_resamples.R")
resamples_df <- suppressWarnings(get_resamples_wandsworth(wands_df, morpho_df)) # creates: data/resample_info.csv
plot_map_resamples(resamples_df) # creates: output/resamples_map.pdf
}
##############################
### Assemblage Composition ###
##############################
### Subset ForCenS to nearest neighbours of resamples:
if(file.exists("data/forcens_subset.csv")){
forcens_df <- read.csv("data/forcens_subset.csv", header = TRUE)
}else{
source("R/find_neighbours.R") # NEAREST neighbour only for the bias analysis
source("R/get_forcens_subset.R")
forcens_df <- read.csv("data/ForCenS_woa.csv", header = TRUE)
forcens_df <- get_forcens_subset(forcens_df,resamples_df) # creates: data/forcens_coord_dist.csv & data/forcens_subset.csv
}
### Merging species counts (assemblages) from (A) re-samples , (B) Buckley collection and (C) ForCenS data:
source("R/get_abund_counts.R")
source("R/get_abund_relat.R")
raw_counts <- read.csv("data/counts_raw_R.csv", header = TRUE, stringsAsFactors = FALSE)
assemb_counts_df <- get_abund_counts(raw_counts , forcens_df) # creates "data/counts_merged.csv"
assemb_relat_df <- get_abund_relat(raw_counts , forcens_df) # creates "data/counts_merged_relat.csv"
source("R/get_abund_relat.R")
raw_counts <- read.csv("data/counts_raw_R.csv", header = TRUE, stringsAsFactors = FALSE)
assemb_counts_df <- get_abund_counts(raw_counts , forcens_df) # creates "data/counts_merged.csv"
assemb_relat_df <- get_abund_relat(raw_counts , forcens_df) # creates "data/counts_merged_relat.csv"
rownames(assemb_counts_df) <- assemb_counts_df$species
rownames(assemb_relat_df) <- assemb_relat_df$species
resamples_df$sample
samples <- resamples_df$sample
richness <- data.frame(forcens=integer(), resamples=integer(), buckley=integer())
simchao_AC <- data.frame()
simchao_AB <- data.frame()
simchao_BC <- data.frame()
i = 5
assemb_counts_df[,c(sprintf("%sC", i), sprintf("%sA", i),sprintf("%sB", i) )]
for (i in samples){
chao_df <- assemb_counts_df[,c(sprintf("%sC", i), sprintf("%sA", i),sprintf("%sB", i) )]
names(chao_df) <- c("forcens", "resamples", "buckley")
chao_df <- chao_df[!rownames(chao_df) %in% c("unidentified","total_counts"),]
richness <- rbind(richness,colSums(apply(chao_df, 2, function(x) x!=0)))
names(richness) <- c("forcens", "resamples", "buckley")
}
chao_df
i
richness
for (i in samples){
chao_df <- assemb_counts_df[,c(sprintf("%sC", i), sprintf("%sA", i),sprintf("%sB", i) )]
names(chao_df) <- c("forcens", "resamples", "buckley")
chao_df <- chao_df[!rownames(chao_df) %in% c("unidentified","total_counts"),]
richness <- rbind(richness,colSums(apply(chao_df, 2, function(x) x!=0), na.rm=TRUE))
names(richness) <- c("forcens", "resamples", "buckley")
}
richness
richness <- data.frame(forcens=integer(), resamples=integer(), buckley=integer())
simchao_AC <- data.frame()
simchao_AB <- data.frame()
simchao_BC <- data.frame()
for (i in samples){
chao_df <- assemb_counts_df[,c(sprintf("%sC", i), sprintf("%sA", i),sprintf("%sB", i) )]
names(chao_df) <- c("forcens", "resamples", "buckley")
chao_df <- chao_df[!rownames(chao_df) %in% c("unidentified","total_counts"),]
richness <- rbind(richness,colSums(apply(chao_df, 2, function(x) x!=0), na.rm=TRUE))
names(richness) <- c("forcens", "resamples", "buckley")
}
richness
rownames(richenss) <- samples
rownames(richness) <- samples
richenss
richness
i=samples[5]
i
chao_df <- assemb_counts_df[,c(sprintf("%sC", i), sprintf("%sA", i),sprintf("%sB", i) )]
names(chao_df) <- c("forcens", "resamples", "buckley")
chao_df <- chao_df[!rownames(chao_df) %in% c("unidentified","total_counts"),]
rownames(chao_df)
chao_df
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/DOUTORADO/R_data")
setwd("./buckley-bias/analysis")
# Packages
library(ggplot2)
library(maptools)
library(mapproj)
library(geosphere) # function distCosine
library(matrixStats)
library(reshape2) # function melt
library(dplyr)
library(SpadeR) # Chao assemblage similarities package
# General Functions
source("R/operator_not_in.R")
### Loading required Data:
wands_df <- read.csv("data/Wandsworth_loans_MRillo.csv", header = TRUE, stringsAsFactors=FALSE)
morpho_df <- read.csv(file=c("data/all_species_morpho.csv"), header = TRUE)
counts_raw_df <- read.csv("data/counts_raw_R.csv", header = TRUE, stringsAsFactors = FALSE)
##########################################
### OBD samples used for bias analysis ###
##########################################
if(file.exists("data/resample_info.csv")){
resamples_df <- read.csv("data/resample_info.csv", header = TRUE)
}else{
source("R/get_resamples_wandsworth.R")
source("R/plot_map_resamples.R")
resamples_df <- suppressWarnings(get_resamples_wandsworth(wands_df, morpho_df)) # creates: data/resample_info.csv
plot_map_resamples(resamples_df) # creates: output/resamples_map.pdf
}
##############################
### Assemblage Composition ###
##############################
###
### Data
###
# Subset ForCenS to nearest neighbours of resamples:
if(file.exists("data/forcens_subset.csv")){
forcens_df <- read.csv("data/forcens_subset.csv", header = TRUE)
}else{
source("R/find_neighbours.R") # NEAREST neighbour only for the bias analysis
source("R/get_forcens_subset.R")
forcens_df <- read.csv("data/ForCenS_woa.csv", header = TRUE)
forcens_df <- get_forcens_subset(forcens_df,resamples_df) # creates: data/forcens_coord_dist.csv & data/forcens_subset.csv
}
# Merging species counts (assemblages) from (A) re-samples , (B) Buckley collection and (C) ForCenS data:
source("R/get_abund_counts.R")
source("R/get_abund_relat.R")
assemb_counts_df <- get_abund_counts(counts_raw_df , forcens_df) # creates "data/counts_merged.csv"
assemb_relat_df <- get_abund_relat(counts_raw_df , forcens_df) # creates "data/counts_merged_relat.csv"
samples <- resamples_df$sample
rownames(assemb_counts_df) <- assemb_counts_df$species
rownames(assemb_relat_df) <- assemb_relat_df$species
simchao_AC <- data.frame()
simchao_AB <- data.frame()
simchao_BC <- data.frame()
i=samples[5]
chao_df <- assemb_counts_df[,c(sprintf("%sC", i), sprintf("%sA", i),sprintf("%sB", i) )]
names(chao_df) <- c("forcens", "resamples", "buckley")
chao_df <- chao_df[!rownames(chao_df) %in% c("unidentified","total_counts"),]
simchaoAB <- SimilarityPair(chao_df[,c("resamples","buckley")], datatype = c("abundance"), nboot = 500)
simchaoAC <- SimilarityPair(chao_df[,c("resamples","forcens")], datatype = c("abundance"), nboot = 500)
chao_df[,c("resamples","forcens")]
i=samples[5]
chao_df <- assemb_counts_df[,c(sprintf("%sC", i), sprintf("%sA", i),sprintf("%sB", i) )]
names(chao_df) <- c("forcens", "resamples", "buckley")
chao_df <- chao_df[!rownames(chao_df) %in% c("unidentified","total_counts"),]
chao_df[is.na(chao_df)] <- 0 # set abundances to 0 of NA species
simchaoAB <- SimilarityPair(chao_df[,c("resamples","buckley")], datatype = c("abundance"), nboot = 500)
simchaoAC <- SimilarityPair(chao_df[,c("resamples","forcens")], datatype = c("abundance"), nboot = 500)
simchaoBC <- SimilarityPair(chao_df[,c("buckley","forcens")], datatype = c("abundance"), nboot = 500)
simchaoAC
simchao_AC <- rbind(simchao_AC,cbind(rbind(
c02 = simchaoAC$Empirical_richness[1,],
c12 = simchaoAC$Empirical_relative[1,],
c22 = simchaoAC$Empirical_relative[2,] ),
sample = rep(i, 3)))
simchao_AB <- rbind(simchao_AB,cbind(rbind(
c02 = simchaoAB$Empirical_richness[1,],
c12 = simchaoAB$Empirical_relative[1,],
c22 = simchaoAB$Empirical_relative[2,] ),
sample = rep(i, 3)))
simchao_BC <- rbind(simchao_BC,cbind(rbind(
c02 = simchaoBC$Empirical_richness[1,],
c12 = simchaoBC$Empirical_relative[1,],
c22 = simchaoBC$Empirical_relative[2,] ),
sample = rep(i, 3)))
simchao_BC
for (i in samples){ # i=samples[5]
chao_df <- assemb_counts_df[,c(sprintf("%sC", i), sprintf("%sA", i),sprintf("%sB", i) )]
names(chao_df) <- c("forcens", "resamples", "buckley")
chao_df <- chao_df[!rownames(chao_df) %in% c("unidentified","total_counts"),]
chao_df[is.na(chao_df)] <- 0 # set abundances to 0 of NA species
simchaoAC <- SimilarityPair(chao_df[,c("resamples","forcens")], datatype = c("abundance"), nboot = 500)
simchaoAB <- SimilarityPair(chao_df[,c("resamples","buckley")], datatype = c("abundance"), nboot = 500)
simchaoBC <- SimilarityPair(chao_df[,c("buckley","forcens")], datatype = c("abundance"), nboot = 500)
simchao_AC <- rbind(simchao_AC,cbind(rbind(
c02 = simchaoAC$Empirical_richness[1,],
c12 = simchaoAC$Empirical_relative[1,],
c22 = simchaoAC$Empirical_relative[2,] ),
sample = rep(i, 3)))
simchao_AB <- rbind(simchao_AB,cbind(rbind(
c02 = simchaoAB$Empirical_richness[1,],
c12 = simchaoAB$Empirical_relative[1,],
c22 = simchaoAB$Empirical_relative[2,] ),
sample = rep(i, 3)))
simchao_BC <- rbind(simchao_BC,cbind(rbind(
c02 = simchaoBC$Empirical_richness[1,],
c12 = simchaoBC$Empirical_relative[1,],
c22 = simchaoBC$Empirical_relative[2,] ),
sample = rep(i, 3)))
rm(simchaoAB)
rm(simchaoAC)
rm(simchaoBC)
rm(chao_df)
}
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/DOUTORADO/R_data")
setwd("./buckley-bias/analysis")
# Packages
library(ggplot2)
library(maptools)
library(mapproj)
library(geosphere) # function distCosine
library(matrixStats)
library(reshape2) # function melt
library(dplyr)
library(SpadeR) # Chao assemblage similarities package
# General Functions
source("R/operator_not_in.R")
### Loading required Data:
wands_df <- read.csv("data/Wandsworth_loans_MRillo.csv", header = TRUE, stringsAsFactors=FALSE)
morpho_df <- read.csv(file=c("data/all_species_morpho.csv"), header = TRUE)
counts_raw_df <- read.csv("data/counts_raw_R.csv", header = TRUE, stringsAsFactors = FALSE)
##########################################
### OBD samples used for bias analysis ###
##########################################
if(file.exists("data/resample_info.csv")){
resamples_df <- read.csv("data/resample_info.csv", header = TRUE)
}else{
source("R/get_resamples_wandsworth.R")
source("R/plot_map_resamples.R")
resamples_df <- suppressWarnings(get_resamples_wandsworth(wands_df, morpho_df)) # creates: data/resample_info.csv
plot_map_resamples(resamples_df) # creates: output/resamples_map.pdf
}
##############################
### Assemblage Composition ###
##############################
###
### Data
###
# Subset ForCenS to nearest neighbours of resamples:
if(file.exists("data/forcens_subset.csv")){
forcens_df <- read.csv("data/forcens_subset.csv", header = TRUE)
}else{
source("R/find_neighbours.R") # NEAREST neighbour only for the bias analysis
source("R/get_forcens_subset.R")
forcens_df <- read.csv("data/ForCenS_woa.csv", header = TRUE)
forcens_df <- get_forcens_subset(forcens_df,resamples_df) # creates: data/forcens_coord_dist.csv & data/forcens_subset.csv
}
# Merging species counts (assemblages) from (A) re-samples , (B) Buckley collection and (C) ForCenS data:
source("R/get_abund_counts.R")
source("R/get_abund_relat.R")
assemb_counts_df <- get_abund_counts(counts_raw_df , forcens_df) # creates "data/counts_merged.csv"
assemb_relat_df <- get_abund_relat(counts_raw_df , forcens_df) # creates "data/counts_merged_relat.csv"
###
### Analysis
###
## OBS: A = picked re-sampled assemblage ; B = Buckley's assemblage ; C = ForCenS neighbouring assemblage
samples <- resamples_df$sample
### Chao - SpadeR package
rownames(assemb_counts_df) <- assemb_counts_df$species
rownames(assemb_relat_df) <- assemb_relat_df$species
simchao_AC <- data.frame()
simchao_AB <- data.frame()
simchao_BC <- data.frame()
i=samples[1]
chao_df <- assemb_counts_df[,c(sprintf("%sC", i), sprintf("%sA", i),sprintf("%sB", i) )]
names(chao_df) <- c("forcens", "resamples", "buckley")
chao_df <- chao_df[!rownames(chao_df) %in% c("unidentified","total_counts"),]
chao_df[is.na(chao_df)] <- 0 # set abundances to 0 of NA species
simchaoAC <- SimilarityPair(chao_df[,c("resamples","forcens")], datatype = c("abundance"), nboot = 500)
simchaoAB <- SimilarityPair(chao_df[,c("resamples","buckley")], datatype = c("abundance"), nboot = 500)
simchaoBC <- SimilarityPair(chao_df[,c("buckley","forcens")], datatype = c("abundance"), nboot = 500)
simchao_AC <- rbind(simchao_AC,cbind(rbind(
c02 = simchaoAC$Empirical_richness[1,],
c12 = simchaoAC$Empirical_relative[1,],
c22 = simchaoAC$Empirical_relative[2,] ),
sample = rep(i, 3)))
simchao_AB <- rbind(simchao_AB,cbind(rbind(
c02 = simchaoAB$Empirical_richness[1,],
c12 = simchaoAB$Empirical_relative[1,],
c22 = simchaoAB$Empirical_relative[2,] ),
sample = rep(i, 3)))
simchao_BC <- rbind(simchao_BC,cbind(rbind(
c02 = simchaoBC$Empirical_richness[1,],
c12 = simchaoBC$Empirical_relative[1,],
c22 = simchaoBC$Empirical_relative[2,] ),
sample = rep(i, 3)))
simchaoAB
simchaoAB <- SimilarityPair(chao_df[,c("resamples","buckley")], datatype = c("abundance"), nboot = 500)
colSums(apply(chao_df, 2, function(x) x!=0)
, na.rm=TRUE)
richness <- data.frame(forcens=integer(), resamples=integer(), buckley=integer())
for (i in samples){ # i=samples[5]
chao_df <- assemb_counts_df[,c(sprintf("%sC", i), sprintf("%sA", i),sprintf("%sB", i) )]
names(chao_df) <- c("forcens", "resamples", "buckley")
chao_df <- chao_df[!rownames(chao_df) %in% c("unidentified","total_counts"),]
richness <- rbind(richness,colSums(apply(chao_df, 2, function(x) x!=0), na.rm=TRUE))
}
names(richness) <- c("forcens", "resamples", "buckley")
richness <- cbind(samples=samples, richness)
richness
i=samples[2]
chao_df <- assemb_counts_df[,c(sprintf("%sC", i), sprintf("%sA", i),sprintf("%sB", i) )]
names(chao_df) <- c("forcens", "resamples", "buckley")
chao_df <- chao_df[!rownames(chao_df) %in% c("unidentified","total_counts"),]
chao_df[is.na(chao_df)] <- 0 # set abundances to 0 of NA species
simchaoAC <- SimilarityPair(chao_df[,c("resamples","forcens")], datatype = c("abundance"), nboot = 500)
simchaoAB <- SimilarityPair(chao_df[,c("resamples","buckley")], datatype = c("abundance"), nboot = 500)
simchaoBC <- SimilarityPair(chao_df[,c("buckley","forcens")], datatype = c("abundance"), nboot = 500)
i=samples[2]
chao_df <- assemb_counts_df[,c(sprintf("%sC", i), sprintf("%sA", i),sprintf("%sB", i) )]
names(chao_df) <- c("forcens", "resamples", "buckley")
chao_df <- chao_df[!rownames(chao_df) %in% c("unidentified","total_counts"),]
chao_df[is.na(chao_df)] <- 0 # set abundances to 0 of NA species
richness <- colSums(apply(chao_df, 2, function(x) x!=0), na.rm=TRUE)
richness
richness[c("forcens","resamples")]
any(richness[c("forcens","resamples")]==1)
!any(richness[c("forcens","resamples")]==1)
all(richness[c("resamples","forcens")]>1)
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/DOUTORADO/R_data")
setwd("./buckley-bias/analysis")
# Packages
library(ggplot2)
library(maptools)
library(mapproj)
library(geosphere) # function distCosine
library(matrixStats)
library(reshape2) # function melt
library(dplyr)
library(SpadeR) # Chao assemblage similarities package
# General Functions
source("R/operator_not_in.R")
### Loading required Data:
wands_df <- read.csv("data/Wandsworth_loans_MRillo.csv", header = TRUE, stringsAsFactors=FALSE)
morpho_df <- read.csv(file=c("data/all_species_morpho.csv"), header = TRUE)
counts_raw_df <- read.csv("data/counts_raw_R.csv", header = TRUE, stringsAsFactors = FALSE)
##########################################
### OBD samples used for bias analysis ###
##########################################
if(file.exists("data/resample_info.csv")){
resamples_df <- read.csv("data/resample_info.csv", header = TRUE)
}else{
source("R/get_resamples_wandsworth.R")
source("R/plot_map_resamples.R")
resamples_df <- suppressWarnings(get_resamples_wandsworth(wands_df, morpho_df)) # creates: data/resample_info.csv
plot_map_resamples(resamples_df) # creates: output/resamples_map.pdf
}
##############################
### Assemblage Composition ###
##############################
###
### Data
###
# Subset ForCenS to nearest neighbours of resamples:
if(file.exists("data/forcens_subset.csv")){
forcens_df <- read.csv("data/forcens_subset.csv", header = TRUE)
}else{
source("R/find_neighbours.R") # NEAREST neighbour only for the bias analysis
source("R/get_forcens_subset.R")
forcens_df <- read.csv("data/ForCenS_woa.csv", header = TRUE)
forcens_df <- get_forcens_subset(forcens_df,resamples_df) # creates: data/forcens_coord_dist.csv & data/forcens_subset.csv
}
# Merging species counts (assemblages) from (A) re-samples , (B) Buckley collection and (C) ForCenS data:
source("R/get_abund_counts.R")
source("R/get_abund_relat.R")
assemb_counts_df <- get_abund_counts(counts_raw_df , forcens_df) # creates "data/counts_merged.csv"
assemb_relat_df <- get_abund_relat(counts_raw_df , forcens_df) # creates "data/counts_merged_relat.csv"
###
### Analysis
###
## OBS: A = picked re-sampled assemblage ; B = Buckley's assemblage ; C = ForCenS neighbouring assemblage
samples <- resamples_df$sample
rownames(assemb_counts_df) <- assemb_counts_df$species
rownames(assemb_relat_df) <- assemb_relat_df$species
simchao_AC <- data.frame()
simchao_AB <- data.frame()
simchao_BC <- data.frame()
for (i in samples){ # i=samples[2]
chao_df <- assemb_counts_df[,c(sprintf("%sC", i), sprintf("%sA", i),sprintf("%sB", i) )]
names(chao_df) <- c("forcens", "resamples", "buckley")
chao_df <- chao_df[!rownames(chao_df) %in% c("unidentified","total_counts"),]
chao_df[is.na(chao_df)] <- 0 # set abundances to 0 of NA species
richness <- colSums(apply(chao_df, 2, function(x) x!=0), na.rm=TRUE)
# SimilarityPair can only be calculated for assemblages with more than ONE species
if(all(richness[c("resamples","forcens")]>1)){
simchaoAC <- SimilarityPair(chao_df[,c("resamples","forcens")], datatype = c("abundance"), nboot = 500)
simchao_AC <- rbind(simchao_AC,cbind(rbind(
c02 = simchaoAC$Empirical_richness[1,],
c12 = simchaoAC$Empirical_relative[1,],
c22 = simchaoAC$Empirical_relative[2,] ),
sample = rep(i, 3)))
}
if(all(richness[c("resamples","buckley")]>1)){
simchaoAB <- SimilarityPair(chao_df[,c("resamples","buckley")], datatype = c("abundance"), nboot = 500)
simchao_AB <- rbind(simchao_AB,cbind(rbind(
c02 = simchaoAB$Empirical_richness[1,],
c12 = simchaoAB$Empirical_relative[1,],
c22 = simchaoAB$Empirical_relative[2,] ),
sample = rep(i, 3)))
}
if(all(richness[c("buckley","forcens")]>1)){
simchaoBC <- SimilarityPair(chao_df[,c("buckley","forcens")], datatype = c("abundance"), nboot = 500)
simchao_BC <- rbind(simchao_BC,cbind(rbind(
c02 = simchaoBC$Empirical_richness[1,],
c12 = simchaoBC$Empirical_relative[1,],
c22 = simchaoBC$Empirical_relative[2,] ),
sample = rep(i, 3)))
}
rm(simchaoAB)
rm(simchaoAC)
rm(simchaoBC)
rm(chao_df)
rm(richness)
}
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/DOUTORADO/R_data")
setwd("./buckley-bias/analysis")
# Packages
library(ggplot2)
library(maptools)
library(mapproj)
library(geosphere) # function distCosine
library(matrixStats)
library(reshape2) # function melt
library(dplyr)
library(SpadeR) # Chao assemblage similarities package
# General Functions
source("R/operator_not_in.R")
### Loading required Data:
wands_df <- read.csv("data/Wandsworth_loans_MRillo.csv", header = TRUE, stringsAsFactors=FALSE)
morpho_df <- read.csv(file=c("data/all_species_morpho.csv"), header = TRUE)
counts_raw_df <- read.csv("data/counts_raw_R.csv", header = TRUE, stringsAsFactors = FALSE)
##########################################
### OBD samples used for bias analysis ###
##########################################
if(file.exists("data/resample_info.csv")){
resamples_df <- read.csv("data/resample_info.csv", header = TRUE)
}else{
source("R/get_resamples_wandsworth.R")
source("R/plot_map_resamples.R")
resamples_df <- suppressWarnings(get_resamples_wandsworth(wands_df, morpho_df)) # creates: data/resample_info.csv
plot_map_resamples(resamples_df) # creates: output/resamples_map.pdf
}
##############################
### Assemblage Composition ###
##############################
###
### Data
###
# Subset ForCenS to nearest neighbours of resamples:
if(file.exists("data/forcens_subset.csv")){
forcens_df <- read.csv("data/forcens_subset.csv", header = TRUE)
}else{
source("R/find_neighbours.R") # NEAREST neighbour only for the bias analysis
source("R/get_forcens_subset.R")
forcens_df <- read.csv("data/ForCenS_woa.csv", header = TRUE)
forcens_df <- get_forcens_subset(forcens_df,resamples_df) # creates: data/forcens_coord_dist.csv & data/forcens_subset.csv
}
# Merging species counts (assemblages) from (A) re-samples , (B) Buckley collection and (C) ForCenS data:
source("R/get_abund_counts.R")
source("R/get_abund_relat.R")
assemb_counts_df <- get_abund_counts(counts_raw_df , forcens_df) # creates "data/counts_merged.csv"
assemb_relat_df <- get_abund_relat(counts_raw_df , forcens_df) # creates "data/counts_merged_relat.csv"
###
### Analysis
###
## OBS: A = picked re-sampled assemblage ; B = Buckley's assemblage ; C = ForCenS neighbouring assemblage
samples <- resamples_df$sample
rownames(assemb_counts_df) <- assemb_counts_df$species
rownames(assemb_relat_df) <- assemb_relat_df$species
simchao_AC <- data.frame()
simchao_AB <- data.frame()
simchao_BC <- data.frame()
for (i in samples){ # i=samples[2]
print(noquote("Samples:"))
print(i)
chao_df <- assemb_counts_df[,c(sprintf("%sC", i), sprintf("%sA", i),sprintf("%sB", i) )]
names(chao_df) <- c("forcens", "resamples", "buckley")
chao_df <- chao_df[!rownames(chao_df) %in% c("unidentified","total_counts"),]
chao_df[is.na(chao_df)] <- 0 # set abundances to 0 of NA species
richness <- colSums(apply(chao_df, 2, function(x) x!=0), na.rm=TRUE)
# SimilarityPair can only be calculated for assemblages with more than ONE species
if(all(richness[c("resamples","forcens")]>1)){
simchaoAC <- SimilarityPair(chao_df[,c("resamples","forcens")], datatype = c("abundance"), nboot = 500)
simchao_AC <- rbind(simchao_AC,cbind(rbind(
c02 = simchaoAC$Empirical_richness[1,],
c12 = simchaoAC$Empirical_relative[1,],
c22 = simchaoAC$Empirical_relative[2,] ),
sample = rep(i, 3)))
rm(simchaoAC)
}
if(all(richness[c("resamples","buckley")]>1)){
simchaoAB <- SimilarityPair(chao_df[,c("resamples","buckley")], datatype = c("abundance"), nboot = 500)
simchao_AB <- rbind(simchao_AB,cbind(rbind(
c02 = simchaoAB$Empirical_richness[1,],
c12 = simchaoAB$Empirical_relative[1,],
c22 = simchaoAB$Empirical_relative[2,] ),
sample = rep(i, 3)))
rm(simchaoAB)
}
if(all(richness[c("buckley","forcens")]>1)){
simchaoBC <- SimilarityPair(chao_df[,c("buckley","forcens")], datatype = c("abundance"), nboot = 500)
simchao_BC <- rbind(simchao_BC,cbind(rbind(
c02 = simchaoBC$Empirical_richness[1,],
c12 = simchaoBC$Empirical_relative[1,],
c22 = simchaoBC$Empirical_relative[2,] ),
sample = rep(i, 3)))
rm(simchaoBC)
}
rm(chao_df)
rm(richness)
}
resamples_df$sample
