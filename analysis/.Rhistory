sapply(list.files(path="./R/aux_functions",pattern="[.]R$", full.names=TRUE), source);
sapply(list.files(path="./R/aux_functions",pattern="[.]R$", source)
# General Functions
source("R/operator_not_in.R")
source("R/write_list.R")
source("R/read_list.R")
source("R/get_resamples_info.R")
source("R/plot_map_resamples.R")
source("R/get_abund_counts.R")
source("R/get_abund_relat.R")
source("R/find_neighbours.R") # NEAREST neighbour only for the bias analysis
source("R/get_forcens_subset.R")
source("R/get_assemb_similarity.R") # NEAREST neighbour only for the bias analysis
source("R/plot_abund_histograms.R")
source("R/plot_assemb_similarity.R")
# Colours for plots
cores10 <- c("#00b900","#0037c6", "#ff7314", "#ff60ff","#86442b","#004d41", "#db0011","#00b5ff","#8000b2", "#d0be00")
### Loading required Data:
wands_df <- read.csv("data/Wandsworth_loans_MRillo.csv", header = TRUE, stringsAsFactors=FALSE)
morpho_df <- read.csv(file=c("data/all_species_morpho.csv"), header = TRUE)
counts_raw_df <- read.csv("data/counts_raw_R.csv", header = TRUE, stringsAsFactors = FALSE)
##########################################
### OBD samples used for bias analysis ###
##########################################
# Getting info (coordinates) of re-sampled sediments
if(file.exists("data/resample_info.csv")){
resamples_df <- read.csv("data/resample_info.csv", header = TRUE)
}else{
resamples_df <- suppressWarnings(get_resamples_info(wands_df, morpho_df)) # creates: data/resample_info.csv
plot_map_resamples(resamples_df) # creates: output/resamples_map.pdf
}
##############################
### Assemblage Composition ###
##############################
###
### Data
###
# Subset ForCenS to nearest neighbours of resamples:
if(file.exists("data/forcens_subset.csv")){
forcens_df <- read.csv("data/forcens_subset.csv", header = TRUE)
}else{
forcens_df <- read.csv("data/ForCenS_woa.csv", header = TRUE)
forcens_df <- get_forcens_subset(forcens_df,resamples_df) # creates: data/forcens_coord_dist.csv & data/forcens_subset.csv
}
# Merging species counts (assemblages) from (A) re-samples , (B) Buckley collection and (C) ForCenS data:
assemb_counts_df <- get_abund_counts(counts_raw_df , forcens_df) # creates "data/counts_merged.csv"
assemb_relat_df <- get_abund_relat(counts_raw_df , forcens_df) # creates "data/counts_merged_relat.csv"
###
### Analysis
###
# Calculating similarity index (based on Chao) for assemblages of Re-sampling X Buckley Collection X ForCenS
if(file.exists("output/assemb_similar_chao.xlsx")){
assemb_sim_list <- function_read_list("output/assemb_similar_chao.xlsx")
}else{
assemb_sim_list <- get_assemb_similarity(assemb_counts_df, resamples_df$sample)
}
###
### Plots
###
# Histograms of species relative abundances for each datasets (Bias, Buckley, ForCenS), per sample
# creates "output/abund_histograms"
suppressWarnings(plot_abund_histograms(assemb_relat_df,resamples_df))
# Chao similarity index plot
plot_assemb_similarity(assemb_sim_list, cores10)
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/DOUTORADO/Projects")
setwd("./buckley-bias/analysis")
source("R/library.R")
sapply(list.files(path="./R/aux_functions",pattern="[.]R$", source))
sapply(list.files(path="./R/aux_functions",pattern="[.]R$"), source)
list.files(path="./R/aux_functions",pattern="[.]R$")
str(list.files(path="./R/aux_functions",pattern="[.]R$"))
str(list.files(path="./R/aux_functions", pattern="[.]R$", full.names=TRUE))
sapply(list.files(path="./R/aux_functions", pattern="[.]R$", full.names=TRUE), source)
files <- list.files(path="./R/aux_functions", pattern="[.]R$", full.names=TRUE)
source(files[1])
source(files[2])
source(files[6])
apply(list.files(path="./R/aux_functions", pattern="[.]R$", full.names=TRUE), source)
install.packages("R.utils")
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/DOUTORADO/Projects")
setwd("./buckley-bias/analysis")
source("R/library.R")
sourceDirectory("./R/aux_functions", modifiedOnly=TRUE)
?return
?return
sourceDirectory("./R/aux_functions", modifiedOnly=TRUE)
resamples_df <- suppressWarnings(get_resamples_info(wands_df, morpho_df)) # creates: data/resample_info.csv
plot_map_resamples(resamples_df) # creates: output/resamples_map.pdf
file.exists("output/resamples_map.pdf")
plot_map_resamples(resamples_df) # creates: output/resamples_map.pdf
overwrite = FALSE\
overwrite = FALSE
file.exists("output/resamples_map.pdf") && overwrite == FALSE
file.exists("output/resamples_map.pdf") && overwrite == TRUE
file.exists("data/resample_info.csv") && overwrite = FALSE
overwrite
file.exists("data/resample_info.csv") && overwrite == FALSE
?plot
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/DOUTORADO/Projects")
setwd("./buckley-bias/analysis")
# Libraries
source("R/library.R")
# Auxiliary functions
sourceDirectory("./R/aux_functions", modifiedOnly=TRUE)
# Colours for plots
cores10 <- c("#00b900","#0037c6", "#ff7314", "#ff60ff","#86442b","#004d41", "#db0011","#00b5ff","#8000b2", "#d0be00")
### Loading required Data:
wands_df <- read.csv("data/Wandsworth_loans_MRillo.csv", header = TRUE, stringsAsFactors=FALSE)
morpho_df <- read.csv(file=c("data/all_species_morpho.csv"), header = TRUE)
counts_raw_df <- read.csv("data/counts_raw_R.csv", header = TRUE, stringsAsFactors = FALSE)
# Getting info (coordinates) of re-sampled sediments
resamples_df <- suppressWarnings(get_resamples_info(wands_df, morpho_df, overwrite = FALSE)) # creates: data/resample_info.csv
plot_map_resamples(resamples_df, overwrite = FALSE) # creates: output/resamples_map.pdf
# Getting info (coordinates) of re-sampled sediments
resamples_df <- suppressWarnings(get_resamples_info(wands_df, morpho_df, overwrite = FALSE)) # creates: data/resample_info.csv
plot_map_resamples(resamples_df, overwrite = FALSE) # creates: output/resamples_map.pdf
# Getting info (coordinates) of re-sampled sediments
resamples_df <- suppressWarnings(get_resamples_info(wands_df, morpho_df, overwrite = FALSE)) # creates: data/resample_info.csv
plot_map_resamples(resamples_df, overwrite = FALSE) # creates: output/resamples_map.pdf
sourceDirectory("./R/aux_functions", modifiedOnly=TRUE)
sourceDirectory("./R/aux_functions", modifiedOnly=TRUE)
sourceDirectory("./R/aux_functions", modifiedOnly=TRUE)
sourceDirectory("./R/aux_functions", modifiedOnly=TRUE)
sourceDirectory("./R/aux_functions", modifiedOnly=TRUE)
# Getting info (coordinates) of re-sampled sediments
resamples_df <- suppressWarnings(get_resamples_info(wands_df, morpho_df, overwrite = FALSE)) # creates: data/resample_info.csv
plot_map_resamples(resamples_df, overwrite = FALSE) # creates: output/resamples_map.pdf
sourceDirectory("./R/aux_functions", modifiedOnly=TRUE)
# Getting info (coordinates) of re-sampled sediments
resamples_df <- suppressWarnings(get_resamples_info(wands_df, morpho_df, overwrite = FALSE)) # creates: data/resample_info.csv
plot_map_resamples(resamples_df, overwrite = FALSE) # creates: output/resamples_map.pdf
sourceDirectory("./R/aux_functions", modifiedOnly=TRUE)
# Getting info (coordinates) of re-sampled sediments
resamples_df <- suppressWarnings(get_resamples_info(wands_df, morpho_df, overwrite = FALSE)) # creates: data/resample_info.csv
plot_map_resamples(resamples_df, overwrite = FALSE) # creates: output/resamples_map.pdf
file.exists("output/resamples_map.pdf") && overwrite == FALSE
overwrite = FALSE
file.exists("output/resamples_map.pdf") && overwrite == FALSE
sourceDirectory("./R/aux_functions", modifiedOnly=TRUE)
# Getting info (coordinates) of re-sampled sediments
resamples_df <- suppressWarnings(get_resamples_info(wands_df, morpho_df, overwrite = FALSE)) # creates: data/resample_info.csv
plot_map_resamples(resamples_df, overwrite = FALSE) # creates: output/resamples_map.pdf
sourceDirectory("./R/aux_functions", modifiedOnly=TRUE)
resamples_df <- suppressWarnings(get_resamples_info(wands_df, morpho_df, overwrite = FALSE)) # creates: data/resample_info.csv
plot_map_resamples(resamples_df, overwrite = FALSE) # creates: output/resamples_map.pdf
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/DOUTORADO/Projects")
setwd("./buckley-bias/analysis")
# Libraries
source("R/library.R")
# Auxiliary functions
sourceDirectory("./R/aux_functions", modifiedOnly=TRUE)
# Colours for plots
cores10 <- c("#00b900","#0037c6", "#ff7314", "#ff60ff","#86442b","#004d41", "#db0011","#00b5ff","#8000b2", "#d0be00")
############
### Data ###
############
# General required Data:
wands_df <- read.csv("data/Wandsworth_loans_MRillo.csv", header = TRUE, stringsAsFactors=FALSE)
morpho_df <- read.csv(file=c("data/all_species_morpho.csv"), header = TRUE)
counts_raw_df <- read.csv("data/counts_raw_R.csv", header = TRUE, stringsAsFactors = FALSE)
# Data for assemblage similarity analysis
forcens_df <- get_forcens_subset(resamples_df,overwrite=FALSE)
# requires: data/ForCenS_woa.csv"
# creates: data/forcens_coord_dist.csv & data/forcens_subset.csv
# Extracting info of re-sampled sediments
resamples_df <- suppressWarnings(get_resamples_info(wands_df, morpho_df, overwrite = FALSE)) # creates: data/resample_info.csv
plot_map_resamples(resamples_df, overwrite = FALSE) # creates: output/resamples_map.pdf
##############################
### Assemblage Composition ###
##############################
### Data
# Merging species counts (assemblages) from (A) re-samples , (B) Buckley collection and (C) ForCenS data:
assemb_counts_df <- get_abund_counts(counts_raw_df , forcens_df) # creates "data/counts_merged.csv"
assemb_relat_df <- get_abund_relat(counts_raw_df , forcens_df) # creates "data/counts_merged_relat.csv"
### Analysis
# Calculating similarity index (based on Chao) for assemblages of Re-sampling X Buckley Collection X ForCenS
assemb_sim_list <- get_assemb_similarity(assemb_counts_df, resamples_df$sample, overwrite = FALSE)
### Plots
# Histograms of species relative abundances for each datasets (Bias, Buckley, ForCenS), per sample
suppressWarnings(plot_abund_histograms(assemb_relat_df, resamples_df)) # creates "output/abund_histograms"
# Chao similarity index plot
plot_assemb_similarity(assemb_sim_list, cores10) # creates "output/assemb_similarity"
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/DOUTORADO/Projects")
setwd("./buckley-bias/analysis")
# Libraries
source("R/library.R")
# Auxiliary functions
sourceDirectory("./R/aux_functions", modifiedOnly=TRUE)
# Colours for plots
cores10 <- c("#00b900","#0037c6", "#ff7314", "#ff60ff","#86442b","#004d41", "#db0011","#00b5ff","#8000b2", "#d0be00")
# General required Data:
wands_df <- read.csv("data/Wandsworth_loans_MRillo.csv", header = TRUE, stringsAsFactors=FALSE)
morpho_df <- read.csv(file=c("data/all_species_morpho.csv"), header = TRUE)
counts_raw_df <- read.csv("data/counts_raw_R.csv", header = TRUE, stringsAsFactors = FALSE)
forcens_df <- get_forcens_subset(resamples_df,overwrite=FALSE)
sourceDirectory("./R/aux_functions", modifiedOnly=TRUE)
sourceDirectory("./R/aux_functions", modifiedOnly=TRUE)
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/DOUTORADO/Projects")
setwd("./buckley-bias/analysis")
# Libraries
source("R/library.R")
sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
# Colours for plots
cores10 <- c("#00b900","#0037c6", "#ff7314", "#ff60ff","#86442b","#004d41", "#db0011","#00b5ff","#8000b2", "#d0be00")
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/DOUTORADO/Projects")
setwd("./buckley-bias/analysis")
# Libraries
source("R/library.R")
sourceDirectory("./R/aux_functions", modifiedOnly=TRUE)
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/DOUTORADO/Projects")
setwd("./buckley-bias/analysis")
# Libraries
source("R/library.R")
# Auxiliary functions
sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
# Colours for plots
cores10 <- c("#00b900","#0037c6", "#ff7314", "#ff60ff","#86442b","#004d41", "#db0011","#00b5ff","#8000b2", "#d0be00")
# General required Data:
wands_df <- read.csv("data/Wandsworth_loans_MRillo.csv", header = TRUE, stringsAsFactors=FALSE)
morpho_df <- read.csv(file=c("data/all_species_morpho.csv"), header = TRUE)
counts_raw_df <- read.csv("data/counts_raw_R.csv", header = TRUE, stringsAsFactors = FALSE)
# Data for assemblage similarity analysis
forcens_df <- get_forcens_subset(resamples_df,overwrite=FALSE)
# requires: data/ForCenS_woa.csv"
# creates: data/forcens_coord_dist.csv & data/forcens_subset.csv
# General required Data:
wands_df <- read.csv("data/Wandsworth_loans_MRillo.csv", header = TRUE, stringsAsFactors=FALSE)
morpho_df <- read.csv(file=c("data/all_species_morpho.csv"), header = TRUE)
counts_raw_df <- read.csv("data/counts_raw_R.csv", header = TRUE, stringsAsFactors = FALSE)
# Data for assemblage similarity analysis
forcens_df <- get_forcens_subset(resamples_df,overwrite=FALSE)
# requires: data/ForCenS_woa.csv"
# creates: data/forcens_coord_dist.csv & data/forcens_subset.csv
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/DOUTORADO/Projects")
setwd("./buckley-bias/analysis")
# Libraries
source("R/library.R")
# Auxiliary functions
sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
# Colours for plots
cores10 <- c("#00b900","#0037c6", "#ff7314", "#ff60ff","#86442b","#004d41", "#db0011","#00b5ff","#8000b2", "#d0be00")
# General required Data:
wands_df <- read.csv("data/Wandsworth_loans_MRillo.csv", header = TRUE, stringsAsFactors=FALSE)
morpho_df <- read.csv(file=c("data/all_species_morpho.csv"), header = TRUE)
counts_raw_df <- read.csv("data/counts_raw_R.csv", header = TRUE, stringsAsFactors = FALSE)
# Data for assemblage similarity analysis
forcens_df <- get_forcens_subset(resamples_df,overwrite=FALSE)
# requires: data/ForCenS_woa.csv"
# creates: data/forcens_coord_dist.csv & data/forcens_subset.csv
# Extracting info of re-sampled sediments
resamples_df <- suppressWarnings(get_resamples_info(wands_df, morpho_df, overwrite = FALSE)) # creates: data/resample_info.csv
plot_map_resamples(resamples_df, overwrite = FALSE) # creates: output/resamples_map.pdf
### Data
# Merging species counts (assemblages) from (A) re-samples , (B) Buckley collection and (C) ForCenS data:
assemb_counts_df <- get_abund_counts(counts_raw_df , forcens_df) # creates "data/counts_merged.csv"
assemb_relat_df <- get_abund_relat(counts_raw_df , forcens_df) # creates "data/counts_merged_relat.csv"
### Analysis
# Calculating similarity index (based on Chao) for assemblages of Re-sampling X Buckley Collection X ForCenS
assemb_sim_list <- get_assemb_similarity(assemb_counts_df, resamples_df$sample, overwrite = FALSE)
### Plots
# Histograms of species relative abundances for each datasets (Bias, Buckley, ForCenS), per sample
suppressWarnings(plot_abund_histograms(assemb_relat_df, resamples_df)) # creates "output/abund_histograms"
# Chao similarity index plot
plot_assemb_similarity(assemb_sim_list, cores10) # creates "output/assemb_similarity"
source("R/library.R")
sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
wands_df
names(wands_df)
names(morpho_df)
# Organizing data
wands_df$Sample.depth.MIN..cm.<-as.numeric(wands_df$Sample.depth.MIN..cm.) # NAs
wands_df$Sample.depth.MAX..cm.<-as.numeric(wands_df$Sample.depth.MAX..cm.) # NAs
wands_df <- wands_df[-which(wands_df[,"Sample..g..approx."]==0),] # deleting sediments that I did/could not sample
# length(wands_df[,1]) # number of samples taken
irn_morpho <- sort(unique(morpho_df[,"Residue.OBD.IRN"]))
# length(irn_morpho) # samples that I used for the morphometric
intersect_samples <- intersect(wands_df[,"Residue.IRN"],irn_morpho) # samples used for morphometric AND re-sampled in Wandsworth
# length(intersect_samples) # samples that I re-sampled and used for morphometrics
# Getting list of sampled sediments AND used for morphometrics
morpho_sampled <- morpho_df[which(morpho_df[,"Residue.OBD.IRN"] %in% intersect_samples),]
# morpho_not_sampled <- morpho_df[which(morpho_df[,"Residue.OBD.IRN"] %!in% intersect_samples),]
wands_sampled <- wands_df[which(wands_df[,"Residue.IRN"] %in% intersect_samples),]
# Checking if they match
# identical(sort(unique(morpho_sampled[,"Residue.OBD.IRN"])),sort(intersect_samples))
# identical(sort(unique(as.integer(wands_sampled[,"Residue.IRN"]))),sort(intersect_samples))
# identical(sort(unique(morpho_sampled[,"Residue.OBD.IRN"])),sort(unique(as.integer(wands_sampled[,"Residue.IRN"]))))
# Counting, for each sample, how many species I used for the morphometrics (the more, the better to do the shell size bias analysis)
morpho_sampled[,"total_ssp_morpho"] <- c()
for (i in 1 : length(unique(morpho_sampled[,"sample"]))){
sample_no <- unique(morpho_sampled[,"sample"])[i]
morpho_sampled[which(morpho_sampled[,"sample"]==sample_no),"total_ssp_morpho"] <- length(unique(morpho_sampled[which(morpho_sampled[,"sample"]==sample_no),"species"]))
}
names(morpho_sampled)
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/DOUTORADO/Projects")
setwd("./buckley-bias/analysis")
# Libraries
source("R/library.R")
# Auxiliary functions
sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
# Colours for plots
cores10 <- c("#00b900","#0037c6", "#ff7314", "#ff60ff","#86442b","#004d41", "#db0011","#00b5ff","#8000b2", "#d0be00")
# General required Data:
wands_df <- read.csv("data/Wandsworth_loans_MRillo.csv", header = TRUE, stringsAsFactors=FALSE)
morpho_df <- read.csv(file=c("data/all_species_morpho.csv"), header = TRUE, stringsAsFactors = FALSE)
counts_raw_df <- read.csv("data/counts_raw_R.csv", header = TRUE, stringsAsFactors = FALSE)
# Data for assemblage similarity analysis
forcens_df <- get_forcens_subset(resamples_df,overwrite=FALSE)
# requires: data/ForCenS_woa.csv"
# creates: data/forcens_coord_dist.csv & data/forcens_subset.csv
# Extracting info of re-sampled sediments
resamples_df <- suppressWarnings(get_resamples_info(wands_df, morpho_df, overwrite = TRUE)) # creates: data/resample_info.csv
plot_map_resamples(resamples_df, overwrite = FALSE) # creates: output/resamples_map.pdf
resamples_df$sample
names(morhpo_df)
names(morpho_df)
resamp_morpho_df <- read.csv("data/resample_info_morpho.csv", header = TRUE, stringsAsFactors=FALSE)
names(resamp_morpho_df)
ssp.names <- c("G.calida","G.conglobatus","G.crassaformis","S.dehiscens","N.dutertrei","G.falconensis",
"G.glutinata","T.humilis","G.inflata","G.menardii","P.obliquiloculata","N.pachyderma",
"G.ruber","G.rubescens","G.sacculifer","G.scitula","G.siphonifera","G.tenellus",
"G.truncatulinoides","G.tumida","O.universa")
ssp.grep <- c("calida","conglobatus","crassaformis","dehiscens","dutertrei","falconensis",
"glutinata","humilis","inflata","menardii","obliquiloculata","pachyderma",
"ruber","rubescens","sacculifer","scitula","siphonifera","tenellus",
"truncatulinoides","tumida", "universa")
##### Saving all ZFs numbers used in the bias analysis ###############################################
zf.bias <- resamp_morpho_df$ZF.PF.no. # plus merged slides!!
merged.slides <- c(6234,7782,6235,6236,6266,7777,7778,7779,6270,6271,5751,5752,5757,5758,7783,7784,7785,5982,5983,5986,5986,
5987,7772,7773,7774,7770,7775,7776,6316,7069,6723,6724,6725,6726,6727,6728,6729,6730,6406,6407,6423,6424,
6690,6691,6010,6013,6057,6019,6020,6021,6022,6023,6024,6040,6041,6011,6012,6018,6058)
# from duplicates_explained.rtf file
buckley.slides <- c(zf.bias,merged.slides)
buckley.slides <- unique(buckley.slides)
buckley.slides <- sort(buckley.slides)
buckley.slides
sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
zf_all <- get_buckley_zf(resamples_df)
sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
zf_all <- get_buckley_zf(resamples_df)
zf_all
j = resamples[1]
print(paste("SAMPLE",j))
resamples <- resamples_df$sample
j = resamples[1]
print(paste("SAMPLE",j))
i = unique(morpho_df$species)[11]
i
rows <- intersect(which(morpho_df["sample"]==j), which(morpho_df["species"]==i))
row
rows
j = resamples[3]
print(paste("SAMPLE",j))
rows <- intersect(which(morpho_df["sample"]==j), which(morpho_df["species"]==i))
rows
print(i)
print(paste("ZF",unique(morpho_df[rows,"ZF.PF.no."]))) # check point
morpho_df
morpho_df
head(morpho_df)
for (j in resamples){ # j = resamples[3]
print(paste("SAMPLE",j))
for (i in unique(morpho_df$species)){ # i = unique(morpho_df$species)[11]
rows <- intersect(which(morpho_df["sample"]==j), which(morpho_df["species"]==i))
if (length(rows) != 0){
print(i)
print(paste("ZF",unique(morpho_df[rows,"ZF.PF.no."]))) # check point
data <- data.frame(area=morpho_df[rows,"area"], diam.max=morpho_df[rows,"diameter"])
write.csv(data, file = paste("Bias_analysis/data_morpho/ssp_sample_csv/",i,j,"B.csv",sep=""),row.names=FALSE)
rm(data)
}
rm(rows)
}
}
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/DOUTORADO/Projects")
setwd("./buckley-bias/analysis")
# Libraries
source("R/library.R")
# Auxiliary functions
sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
# Colours for plots
cores10 <- c("#00b900","#0037c6", "#ff7314", "#ff60ff","#86442b","#004d41", "#db0011","#00b5ff","#8000b2", "#d0be00")
############
### Data ###
############
# General required Data:
wands_df <- read.csv("data/Wandsworth_loans_MRillo.csv", header = TRUE, stringsAsFactors=FALSE)
morpho_df <- read.csv(file=c("data/all_species_morpho.csv"), header = TRUE, stringsAsFactors = FALSE)
counts_raw_df <- read.csv("data/counts_raw_R.csv", header = TRUE, stringsAsFactors = FALSE)
# Data for assemblage similarity analysis
forcens_df <- get_forcens_subset(resamples_df,overwrite=FALSE)
# requires: data/ForCenS_woa.csv"
# creates: data/forcens_coord_dist.csv & data/forcens_subset.csv
# Extracting info of re-sampled sediments
resamples_df <- suppressWarnings(get_resamples_info(wands_df, morpho_df, overwrite = FALSE)) # creates: data/resample_info.csv & data/resample_info_morpho.csv
plot_map_resamples(resamples_df, overwrite = FALSE) # creates: output/resamples_map.pdf
##############################
### Assemblage Composition ###
##############################
### Data
# Merging species counts (assemblages) from (A) re-samples , (B) Buckley collection and (C) ForCenS data:
assemb_counts_df <- get_abund_counts(counts_raw_df , forcens_df) # creates "data/counts_merged.csv"
assemb_relat_df <- get_abund_relat(counts_raw_df , forcens_df) # creates "data/counts_merged_relat.csv"
### Analysis
# Calculating similarity index (based on Chao) for assemblages of Re-sampling X Buckley Collection X ForCenS
assemb_sim_list <- get_assemb_similarity(assemb_counts_df, resamples_df$sample, overwrite = FALSE)
### Plots
# Histograms of species relative abundances for each datasets (Bias, Buckley, ForCenS), per sample
suppressWarnings(plot_abund_histograms(assemb_relat_df, resamples_df)) # creates "output/abund_histograms"
# Chao similarity index plot
plot_assemb_similarity(assemb_sim_list, cores10) # creates "output/assemb_similarity"
#########################
### Size Distribution ###
#########################
### Data
resamp_morpho_df <- read.csv("data/resample_info_morpho.csv", header = TRUE, stringsAsFactors=FALSE)
morpho_df
resamples <- resamples_df$sample
ssp.names <- c("G.calida","G.conglobatus","G.crassaformis","S.dehiscens","N.dutertrei","G.falconensis",
"G.glutinata","T.humilis","G.inflata","G.menardii","P.obliquiloculata","N.pachyderma",
"G.ruber","G.rubescens","G.sacculifer","G.scitula","G.siphonifera","G.tenellus",
"G.truncatulinoides","G.tumida","O.universa")
ssp.grep <- c("calida","conglobatus","crassaformis","dehiscens","dutertrei","falconensis",
"glutinata","humilis","inflata","menardii","obliquiloculata","pachyderma",
"ruber","rubescens","sacculifer","scitula","siphonifera","tenellus",
"truncatulinoides","tumida", "universa")
zf_all <- get_buckley_zf(resamples_df) # all slides ZFs numbers from Buckley Collection used in the bias analysis
zf_all <- get_buckley_zf(resamples_df) # all slides ZFs numbers from Buckley Collection used in the bias analysis
sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
zf_all <- get_buckley_zf(resamples_df) # all slides ZFs numbers from Buckley Collection used in the bias analysis
zf_all
for (j in resamples){ # j = resamples[3]
print(paste("SAMPLE",j))
for (i in unique(morpho_df$species)){ # i = unique(morpho_df$species)[11]
rows <- intersect(which(morpho_df["sample"]==j), which(morpho_df["species"]==i))
if (length(rows) != 0){
print(i)
print(paste("ZF",unique(morpho_df[rows,"ZF.PF.no."]))) # check point
data <- data.frame(area=morpho_df[rows,"area"], diam.max=morpho_df[rows,"diameter"])
write.csv(data, file = paste("Bias_analysis/data_morpho/ssp_sample_csv/",i,j,"B.csv",sep=""),row.names=FALSE)
rm(data)
}
rm(rows)
}
}
print(i)
print(paste("ZF",unique(morpho_df[rows,"ZF.PF.no."]))) # check point
data <- data.frame(area=morpho_df[rows,"area"], diam.max=morpho_df[rows,"diameter"])
data
names(moirpho_df)
names(morpho_df)
for (j in resamples){ # j = resamples[3]
for (i in unique(morpho_df$species)){ # i = unique(morpho_df$species)[11]
rows <- intersect(which(morpho_df["sample"]==j), which(morpho_df["species"]==i))
if (length(rows) != 0){
data <- data.frame(area=morpho_df[rows,"area"], diam.max=morpho_df[rows,"diameter"])
write.csv(data, file = paste("data/morphometrics/",i,j,"buckley.csv",sep=""),row.names=FALSE)
rm(data)
}
rm(rows)
}
}
resamples_df$samples
resamples_df$sample
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/DOUTORADO/Projects")
setwd("./buckley-bias/analysis")
# Libraries
source("R/library.R")
# Auxiliary functions
sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
# Colours for plots
cores10 <- c("#00b900","#0037c6", "#ff7314", "#ff60ff","#86442b","#004d41", "#db0011","#00b5ff","#8000b2", "#d0be00")
# General required Data:
wands_df <- read.csv("data/Wandsworth_loans_MRillo.csv", header = TRUE, stringsAsFactors=FALSE)
morpho_buckley_df <- read.csv(file=c("data/morpho_buckley.csv"), header = TRUE, stringsAsFactors = FALSE)
counts_raw_df <- read.csv("data/counts_raw_R.csv", header = TRUE, stringsAsFactors = FALSE)
# Data for assemblage similarity analysis
forcens_df <- get_forcens_subset(resamples_df,overwrite=FALSE)
# requires: data/ForCenS_woa.csv"
# creates: data/forcens_coord_dist.csv & data/forcens_subset.csv
# Extracting info of re-sampled sediments
resamples_df <- suppressWarnings(get_resamples_info(wands_df, morpho_buckley_df, overwrite = FALSE)) # creates: data/resample_info.csv & data/resample_info_morpho.csv
plot_map_resamples(resamples_df, overwrite = FALSE) # creates: output/resamples_map.pdf
##############################
### Assemblage Composition ###
##############################
### Data
# Merging species counts (assemblages) from (A) re-samples , (B) Buckley collection and (C) ForCenS data:
assemb_counts_df <- get_abund_counts(counts_raw_df , forcens_df) # creates "data/counts_merged.csv"
assemb_relat_df <- get_abund_relat(counts_raw_df , forcens_df) # creates "data/counts_merged_relat.csv"
### Analysis
# Calculating similarity index (based on Chao) for assemblages of Re-sampling X Buckley Collection X ForCenS
assemb_sim_list <- get_assemb_similarity(assemb_counts_df, resamples_df$sample, overwrite = FALSE)
resamp_morpho_df <- read.csv("data/resample_info_morpho.csv", header = TRUE, stringsAsFactors=FALSE)
names(morpho_buckley_df)
zf_all <- get_buckley_zf(resamples_df) # all slides ZFs numbers from Buckley Collection used in the bias analysis
zf_all
get_buckley_morpho(morpho_buckley_df, resamples_df) # creates one CSV for each species for each sample (data/morphometrics/___buckley)
get_buckley_morpho(morpho_buckley_df, resamples_df) # creates one CSV for each species for each sample (data/morphometrics/___buckley)
sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
get_buckley_morpho(morpho_buckley_df, resamples_df) # creates one CSV for each species for each sample (data/morphometrics/___buckley)
