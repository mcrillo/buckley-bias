sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
# Colours for plots
cores10 <- c("#00b900","#0037c6", "#ff7314", "#ff60ff","#86442b","#004d41", "#db0011","#00b5ff","#8000b2", "#d0be00")
cores11 <- c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a','#ffff99')
############
### Data ###
############
distance = 0 # distance, in meters, between the datasets morphometrics & ForCenS (relative abundance)
if(file.exists(paste("data/morpho_woa_forcens_",distance,"m.csv", sep = ""))){
data <- read.csv(paste("data/morpho_woa_forcens_",distance,"m.csv", sep = ""), header = TRUE)
}else{
data <- merge_morpho_measuremts(overwrite = FALSE)
# Adding temperature to dataset (WOA2013 data from 1955-1964)
data <- merge_morpho_woa(data, overwrite = FALSE) # if R error --> See README file
# Merging morpho and ForCenS, considering neighbours within 'distance' circle
forcens <- subset_forcens(data, distance, overwrite = FALSE)
data <- merge_morpho_forcens(data, forcens, distance, overwrite = FALSE)
}
### Comparing relative vs. absolute abundance sediment trap
plot_rel_abs_abund() # output/rel_abs_abund
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/PhD/Projects")
setwd("./size-distrib-forams/analysis")
# Libraries
source("R/library.R")
# Auxiliary functions
sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
# Colours for plots
cores10 <- c("#00b900","#0037c6", "#ff7314", "#ff60ff","#86442b","#004d41", "#db0011","#00b5ff","#8000b2", "#d0be00")
cores11 <- c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a','#ffff99')
############
### Data ###
############
distance = 0 # distance, in meters, between the datasets morphometrics & ForCenS (relative abundance)
if(file.exists(paste("data/morpho_woa_forcens_",distance,"m.csv", sep = ""))){
data <- read.csv(paste("data/morpho_woa_forcens_",distance,"m.csv", sep = ""), header = TRUE)
}else{
data <- merge_morpho_measuremts(overwrite = FALSE)
# Adding temperature to dataset (WOA2013 data from 1955-1964)
data <- merge_morpho_woa(data, overwrite = FALSE) # if R error --> See README file
# Merging morpho and ForCenS, considering neighbours within 'distance' circle
forcens <- subset_forcens(data, distance, overwrite = FALSE)
data <- merge_morpho_forcens(data, forcens, distance, overwrite = FALSE)
}
### Comparing relative vs. absolute abundance sediment trap
# plot_rel_abs_abund() # output/rel_abs_abund
#####################
### Size Analysis ###
#####################
create_table_indiv_samples(data) # CSV and TeX table output
histograms_size(data, cores11) # size_histograms
maps_cruises(data) # maps_cruises
head(data)
names(data)
names(forcens)
forcens <- subset_forcens(data, distance, overwrite = FALSE)
forcens
names(forcens)
names(data)
i = unique(morpho$sample)[2]
sample <- morpho[i,"sample"]
ssp <- morpho[i,"species"]
morpho <- data
i = unique(morpho$sample)[2]
sample <- morpho[i,"sample"]
ssp <- morpho[i,"species"]
sample
ssp
forcens[which(forcens[,"sample"]==sample),which(colnames(forcens)==ssp)]
forcens[which(forcens[,"sample"]==sample),]
mean(forcens[which(forcens[,"sample"]==sample),which(colnames(forcens)=="woa_tmn")])
mean(forcens[which(forcens[,"sample"]==sample),which(colnames(forcens)=="woa_tsd")])
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/PhD/Projects")
setwd("./size-distrib-forams/analysis")
# Libraries
source("R/library.R")
# Auxiliary functions
sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
# Colours for plots
cores10 <- c("#00b900","#0037c6", "#ff7314", "#ff60ff","#86442b","#004d41", "#db0011","#00b5ff","#8000b2", "#d0be00")
cores11 <- c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a','#ffff99')
distance = 0 # distance, in meters, between the datasets morphometrics & ForCenS (relative abundance)
data <- merge_morpho_measuremts(overwrite = FALSE)
data <- merge_morpho_woa(data, overwrite = FALSE) # if R error --> See README file
forcens <- subset_forcens(data, distance, overwrite = FALSE)
data <- merge_morpho_forcens(data, forcens, distance, overwrite = TRUE)
if(file.exists(paste("data/morpho_woa_forcens_",distance,"m.csv", sep = ""))){
data <- read.csv(paste("data/morpho_woa_forcens_",distance,"m.csv", sep = ""), header = TRUE)
}else{
data <- merge_morpho_measuremts(overwrite = FALSE)
# Adding temperature to dataset (WOA2013 data from 1955-1964)
data <- merge_morpho_woa(data, overwrite = FALSE) # if R error --> See README file
# Merging morpho and ForCenS, considering neighbours within 'distance' circle
forcens <- subset_forcens(data, distance, overwrite = FALSE)
data <- merge_morpho_forcens(data, forcens, distance, overwrite = TRUE)
}
names(data)
boxplot_forcens_size(data) # size_boxplots folder
linear_model_pop(data)
linear_mixmodel_ind(data)
linear_mixmodel_ind(data)
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/PhD/Projects")
setwd("./size-distrib-forams/analysis")
# Libraries
source("R/library.R")
# Auxiliary functions
sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
# Colours for plots
cores10 <- c("#00b900","#0037c6", "#ff7314", "#ff60ff","#86442b","#004d41", "#db0011","#00b5ff","#8000b2", "#d0be00")
cores11 <- c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a','#ffff99')
############
### Data ###
############
distance = 0 # distance, in meters, between the datasets morphometrics & ForCenS (relative abundance)
if(file.exists(paste("data/morpho_woa_forcens_",distance,"m.csv", sep = ""))){
data <- read.csv(paste("data/morpho_woa_forcens_",distance,"m.csv", sep = ""), header = TRUE)
}else{
data <- merge_morpho_measuremts(overwrite = FALSE)
# Adding temperature to dataset (WOA2013 data from 1955-1964)
data <- merge_morpho_woa(data, overwrite = FALSE) # if R error --> See README file
# Merging morpho and ForCenS, considering neighbours within 'distance' circle
forcens <- subset_forcens(data, distance, overwrite = FALSE)
data <- merge_morpho_forcens(data, forcens, distance, overwrite = TRUE)
}
### Comparing relative vs. absolute abundance sediment trap
# plot_rel_abs_abund() # output/rel_abs_abund
#####################
### Size Analysis ###
#####################
create_table_indiv_samples(data) # CSV and TeX table output
histograms_size(data, cores11) # size_histograms
maps_cruises(data) # maps_cruises
linear_mixmodel_ind(data)
n=1
data_sp_ind <- data[which(data[,"species"] == species_names[n]),]
lmm_0 <- lmer(area_log ~ 1 + (1|sample), data = data_sp_ind, REML=FALSE)
lmm_0T <- lmer(area_log ~ tmn_0m + (1|sample), data = data_sp_ind, REML=FALSE) # since abund nearest = abund 500m (upgrade report), I am using nearest.
lmm_0abund <- lmer(area_log ~ rel_abund + (1|sample), data = data_sp_ind, REML=FALSE)
lmm_Tabund <- lmer(area_log ~ tmn_0m + rel_abund + (1|sample), data = data_sp_ind, REML=FALSE)
lmm_TXabund <- lmer(area_log ~ tmn_0m * rel_abund + (1|sample), data = data_sp_ind, REML=FALSE) # interaction
# coef()
# Usually we will be interested in the marginal effects...
r.squaredGLMM(lmm_0)
r.squaredGLMM(lmm_0T)
r.squaredGLMM(lmm_0abund)
r.squaredGLMM(lmm_Tabund)
r.squaredGLMM(lmm_TXabund)
anova_0_0T <- anova(lmm_0, lmm_0T)
summary(anova_0_0T)
anova_0_0T
sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
linear_mixmodel_ind(data)
if(!file.exists("data/morpho_bias-analysis.csv")){
resamp_morpho_df <- read.csv("data/resample_info_morpho.csv", header = TRUE, stringsAsFactors=FALSE)
# zf_all <- get_buckley_zf(resamples_df) # all slides ZFs numbers from Buckley Collection used in the bias analysis
get_size_data_buckley(morpho_size_distrib, resamp_morpho_df) # creates data/raw_data_morpho_R
get_size_data_bias() # requires CSV files from folder data/raw_data/morpho_bias_buckley
morpho_df <- merge_size_data()
}else{
morpho_df <-read.csv("data/morpho_bias-analysis.csv", header = TRUE, stringsAsFactors=FALSE)
}
morpho_stats <- get_size_pop_stats(morpho_df) # summary statistics for each ssp population of morpho_df
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/PhD/Projects")
setwd("./buckley-bias/analysis")
# Libraries
source("R/library.R")
# Auxiliary functions
sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
# Colours for plots
cores10 <- c("#00b900","#0037c6", "#ff7314", "#ff60ff","#86442b","#004d41", "#db0011","#00b5ff","#8000b2", "#d0be00")
# Extracting info of re-sampled sediments
morpho_size_distrib <- read.csv(file=c("data/morpho_size-distrib.csv"), header = TRUE, stringsAsFactors = FALSE)
resamples_df <- suppressWarnings(get_resamples_info(morpho_size_distrib, overwrite = FALSE)) # creates: data/resample_info.csv & data/resample_info_morpho.csv
# plot_map_resamples(resamples_df, overwrite = FALSE) # creates: output/resamples_map.pdf
##############################
### Assemblage Composition ###
##############################
### Data
forcens_df <- get_forcens_subset(resamples_df,overwrite=FALSE)
# Merging species counts (assemblages) from (A) re-samples , (B) Buckley collection and (C) ForCenS data:
assemb_counts_df <- get_abund_counts(forcens_df) # creates "data/counts_merged.csv"
assemb_relat_df <- get_abund_relat(forcens_df) # creates "data/counts_merged_relat.csv"
### Analysis
# Calculating similarity index (based on Chao) for assemblages of Re-sampling X Buckley Collection X ForCenS
assemb_sim_list <- get_assemb_similarity(assemb_counts_df, resamples_df$sample, overwrite = FALSE)
### Plots
# Histograms of species relative abundances for each datasets (Bias, Buckley, ForCenS), per sample
suppressWarnings(plot_abund_histograms(assemb_relat_df, resamples_df)) # creates "output/abund_histograms"
# Chao similarity index plot
plot_assemb_similarity(assemb_sim_list, cores10) # creates "output/assemb_similarity"
#########################
### Size Distribution ###
#########################
###
### Data
###
if(!file.exists("data/morpho_bias-analysis.csv")){
resamp_morpho_df <- read.csv("data/resample_info_morpho.csv", header = TRUE, stringsAsFactors=FALSE)
# zf_all <- get_buckley_zf(resamples_df) # all slides ZFs numbers from Buckley Collection used in the bias analysis
get_size_data_buckley(morpho_size_distrib, resamp_morpho_df) # creates data/raw_data_morpho_R
get_size_data_bias() # requires CSV files from folder data/raw_data/morpho_bias_buckley
morpho_df <- merge_size_data()
}else{
morpho_df <-read.csv("data/morpho_bias-analysis.csv", header = TRUE, stringsAsFactors=FALSE)
}
morpho_stats <- get_size_pop_stats(morpho_df) # summary statistics for each ssp population of morpho_df
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/PhD/Projects")
setwd("./buckley-bias/analysis")
# Libraries
source("R/library.R")
# Auxiliary functions
sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
# Colours for plots
cores10 <- c("#00b900","#0037c6", "#ff7314", "#ff60ff","#86442b","#004d41", "#db0011","#00b5ff","#8000b2", "#d0be00")
# Extracting info of re-sampled sediments
morpho_size_distrib <- read.csv(file=c("data/morpho_size-distrib.csv"), header = TRUE, stringsAsFactors = FALSE)
resamples_df <- suppressWarnings(get_resamples_info(morpho_size_distrib, overwrite = FALSE)) # creates: data/resample_info.csv & data/resample_info_morpho.csv
# plot_map_resamples(resamples_df, overwrite = FALSE) # creates: output/resamples_map.pdf
### Data
forcens_df <- get_forcens_subset(resamples_df,overwrite=FALSE)
# Merging species counts (assemblages) from (A) re-samples , (B) Buckley collection and (C) ForCenS data:
assemb_counts_df <- get_abund_counts(forcens_df, overwrite = FALSE) # creates "data/counts_merged.csv"
assemb_relat_df <- get_abund_relat(forcens_df, overwrite = FALSE) # creates "data/counts_merged_relat.csv"
### Analysis
# Calculating similarity index (based on Chao) for assemblages of Re-sampling X Buckley Collection X ForCenS
assemb_sim_list <- get_assemb_similarity(assemb_counts_df, resamples_df$sample, overwrite = FALSE)
### Plots
# Histograms of species relative abundances for each datasets (Bias, Buckley, ForCenS), per sample
suppressWarnings(plot_abund_histograms(assemb_relat_df, resamples_df)) # creates "output/abund_histograms"
# Chao similarity index plot
plot_assemb_similarity(assemb_sim_list, cores10) # creates "output/assemb_similarity"
if(!file.exists("data/morpho_bias-analysis.csv")){
resamp_morpho_df <- read.csv("data/resample_info_morpho.csv", header = TRUE, stringsAsFactors=FALSE)
# zf_all <- get_buckley_zf(resamples_df) # all slides ZFs numbers from Buckley Collection used in the bias analysis
get_size_data_buckley(morpho_size_distrib, resamp_morpho_df) # creates data/raw_data_morpho_R
get_size_data_bias() # requires CSV files from folder data/raw_data/morpho_bias_buckley
morpho_df <- merge_size_data()
}else{
morpho_df <-read.csv("data/morpho_bias-analysis.csv", header = TRUE, stringsAsFactors=FALSE)
}
morpho_stats <- get_size_pop_stats(morpho_df) # summary statistics for each ssp population of morpho_df
morpho_stats <- read.csv("Bias_analysis/data_morpho/bias_morpho_populations.csv", header = TRUE, stringsAsFactors=FALSE)
list.split <- split(morpho_stats, morpho_stats$datasetAB) # split accordingly to datasetAB
colnames(list.split$A)[6:19] <- paste(colnames(list.split$A)[6:19],"A", sep = "")
colnames(list.split$B)[6:19] <- paste(colnames(list.split$B)[6:19],"B", sep = "")
morpho_statsAB <- cbind(list.split$A,list.split$B[6:19])
morpho_statsAB <- morpho_statsAB[,-4] # drop duplicate column 'datasetAB'
names(morpho_statsAB)
lmax <- lm(area_log_maxB ~ area_log_maxA, morpho_statsAB)
summary(lmax)
lmedian <- lm(area_log_medianB ~ area_log_medianA, morpho_statsAB)
summary(lmedian)
lmean <- lm(area_log_meanB ~ area_log_meanA, morpho_statsAB)
summary(lmean)
l75q <- lm(area_log_75qB ~ area_log_75qA, morpho_statsAB)
summary(l75q)
l95q <- lm(area_log_95qB ~ area_log_95qA, morpho_statsAB)
summary(l95q)
lmax$coefficients
lmax$predicted <- predict(lmax)   # Save the predicted values
lmax$residuals <- residuals(lmax)
flmax <- fortify(lmax)
ggplot(flmax, aes(x = .fitted, y = .resid)) + geom_point()
plot(lmax)
head(fortify(lmax))
rmax <- morpho_statsAB$area_log_maxB - morpho_statsAB$area_log_maxA
rmean <- morpho_statsAB$area_log_meanB - morpho_statsAB$area_log_meanA
rmedian <- morpho_statsAB$area_log_medianB - morpho_statsAB$area_log_medianA
r95q <- morpho_statsAB$area_log_95qB - morpho_statsAB$area_log_95qA
r75q <- morpho_statsAB$area_log_75qB - morpho_statsAB$area_log_75qA
morpho_statsAB$area_log_maxB
morpho_statsAB$area_log_maxA
head(morpho_statsAB)
residuals <- data.frame(rmean, rmedian, r75q, r95q, rmax)
apply(residuals, 2, var)
apply(residuals, 2, mean)
res <- melt(residuals)
str(res)
b <- ggplot(data = res, aes(x=variable, y=value)) + geom_violin(aes(fill=variable), position=position_dodge(width=0.8))
b + labs(y = "Residuals", x = element_blank()) + ylim (-3,3) +
scale_x_discrete(labels=c("Mean", "Median", "75%q", "95%q", "Maximum")) +
scale_fill_manual(values=c("#7c96a0","#5e5749","#a48e8e","#5d5f6d","#717f70")) +
theme(axis.text.y = element_text(size=14, color = "black", face="bold"),
axis.title.y = element_text(size=16, color = "black", face="bold"),
axis.text.x = element_text(size=16, color = "black", face="bold"),
axis.ticks.x = element_blank(), legend.position="none")
# Defining colors for each species
cores21 <- c("#7c3f27","#7144ca","#c1dd44","#c949bd","#67ce59","#4b2d6b","#ccab3e","#6479c8",
"#d44430","#78dcc1","#ce3f71","#4d9060","#c588c4","#c3d088","#682b42","#7aa7c2",
"#cd7f41","#3d4342","#cf7a80","#5f692d","#ccb6a8")
length(cores21) == length(unique(morpho_statsAB$species))
bmax <- ggplot(morpho_statsAB, aes(y = area_log_maxB, x = area_log_maxA) )
bmax + geom_point(aes(colour = factor(sspname)), size = 3.5)  +  xlim(10, 14.5) + ylim(10, 14.5) +
geom_abline(intercept = 0, slope = 1) + geom_abline(intercept = lmax$coefficients[1], slope=lmax$coefficients[2], col="red")+
labs(y = "Maximum log(area) - Buckley Collection", x = "Maximum log(area) - Resamples") +
scale_color_manual(values=cores21, name= c("Species")) +
guides(col = guide_legend(ncol = 1), fill = guide_legend(title = "Species")) +
theme(axis.text=element_text(size=16,colour = "black"), axis.title=element_text(size=16,face="bold"),
aspect.ratio = 1, legend.text = element_text(size = 16, face="italic"), legend.title = element_text(size=16, face="bold"))
bmean <- ggplot(morpho_statsAB, aes(y = area_log_meanB, x = area_log_meanA) )
bmean + geom_point(aes(colour = factor(sspname)), size = 3.5)  +  xlim(10, 14.5) + ylim(10, 14.5) +
geom_abline(intercept = 0) +
labs(y = "Mean log(area) - Buckley Collection", x = "Mean log(area) - Resamples") +
scale_color_manual(values=cores21, name= c("Species")) +
guides(col = guide_legend(ncol = 1), fill = guide_legend(title = "Species")) +
theme(axis.text=element_text(size=16,colour = "black"), axis.title=element_text(size=16,face="bold"),
aspect.ratio = 1, legend.text = element_text(size = 16, face="italic"), legend.title = element_text(size=16, face="bold"))
bmedian <- ggplot(morpho_statsAB, aes(y = area_log_medianB, x = area_log_medianA) )
bmedian + geom_point(aes(colour = factor(sspname)), size = 3.5)  +  xlim(10, 14.5) + ylim(10, 14.5) +
geom_abline(intercept = 0) +
labs(y = "Median log(area) - Buckley Collection", x = "Median log(area) - Resamples") +
scale_color_manual(values=cores21, name= c("Species")) +
guides(col = guide_legend(ncol = 1), fill = guide_legend(title = "Species")) +
theme(axis.text=element_text(size=16,colour = "black"), axis.title=element_text(size=16,face="bold"),
aspect.ratio = 1, legend.text = element_text(size = 16, face="italic"), legend.title = element_text(size=16, face="bold"))
b95q <- ggplot(morpho_statsAB, aes(y = area_log_95qB, x = area_log_95qA) )
b95q + geom_point(aes(colour = factor(sspname)), size = 3.5)  +  xlim(10, 14.5) + ylim(10, 14.5) +
geom_abline(intercept = 0) +
labs(y = "95-quantile log(area) - Buckley Collection", x = "95-quantile log(area) - Resamples") +
scale_color_manual(values=cores21, name= c("Species")) +
guides(col = guide_legend(ncol = 1), fill = guide_legend(title = "Species")) +
theme(axis.text=element_text(size=16,colour = "black"), axis.title=element_text(size=16,face="bold"),
aspect.ratio = 1, legend.text = element_text(size = 16, face="italic"), legend.title = element_text(size=16, face="bold"))
b75q <- ggplot(morpho_statsAB, aes(y = area_log_75qB, x = area_log_75qA) )
b75q + geom_point(aes(colour = factor(sspname)), size = 3.5)  +  xlim(10, 14.5) + ylim(10, 14.5) +
geom_abline(intercept = 0) +
labs(y = "75-quantile log(area) - Buckley Collection", x = "75-quantile log(area) - Resamples") +
scale_color_manual(values=cores21, name= c("Species")) +
guides(col = guide_legend(ncol = 1), fill = guide_legend(title = "Species")) +
theme(axis.text=element_text(size=16,colour = "black"), axis.title=element_text(size=16,face="bold"),
aspect.ratio = 1, legend.text = element_text(size = 16, face="italic"), legend.title = element_text(size=16, face="bold"))
rmax <- morpho_statsAB$area_log_maxB - morpho_statsAB$area_log_maxA
rmean <- morpho_statsAB$area_log_meanB - morpho_statsAB$area_log_meanA
rmedian <- morpho_statsAB$area_log_medianB - morpho_statsAB$area_log_medianA
r95q <- morpho_statsAB$area_log_95qB - morpho_statsAB$area_log_95qA
r75q <- morpho_statsAB$area_log_75qB - morpho_statsAB$area_log_75qA
residuals <- data.frame(rmean, rmedian, r75q, r95q, rmax)
apply(residuals, 2, var)
apply(residuals, 2, mean)
morpho_statsAB$area_log_maxB
morpho_statsAB$area_log_maxA
rmax <- morpho_statsAB$area_log_maxB - morpho_statsAB$area_log_maxA
rmax
res <- melt(residuals)
str(res)
residuals <- data.frame(rmean, rmedian, r75q, r95q, rmax)
apply(residuals, 2, var)
apply(residuals, 2, mean)
res <- melt(residuals)
res
morpho_df
species_names <- c(
"conglobatus",
"dehiscens",
"dutertrei",
"inflata",
"menardii",
"obliquiloculata",
"pachyderma",
"ruber",
"sacculifer",
"siphonifera",
"truncatulinoides"
)
source("species_names.R")
source("aux_functions/species_names.R")
source("R/aux_functions/species_names.R")
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/PhD/Projects")
setwd("./buckley-bias/analysis")
# Libraries
source("R/library.R")
# Auxiliary functions
sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
# Colours for plots
cores10 <- c("#00b900","#0037c6", "#ff7314", "#ff60ff","#86442b","#004d41", "#db0011","#00b5ff","#8000b2", "#d0be00")
if(!file.exists("data/morpho_bias-analysis.csv")){
resamp_morpho_df <- read.csv("data/resample_info_morpho.csv", header = TRUE, stringsAsFactors=FALSE)
# zf_all <- get_buckley_zf(resamples_df) # all slides ZFs numbers from Buckley Collection used in the bias analysis
get_size_data_buckley(morpho_size_distrib, resamp_morpho_df) # creates data/raw_data_morpho_R
get_size_data_bias() # requires CSV files from folder data/raw_data/morpho_bias_buckley
morpho_df <- merge_size_data()
}else{
morpho_df <-read.csv("data/morpho_bias-analysis.csv", header = TRUE, stringsAsFactors=FALSE)
}
morpho_stats <- get_size_pop_stats(morpho_df) # summary statistics for each ssp population of morpho_df
species_names
morpho_df_subset <- morpho_df[which(morpho_df$species %in% species_names), ]
names(morpho_df_subset)
str(morpho_df_subset)
data <- morpho_df[which(morpho_df$species %in% species_names), ]
i <- unique(data$species)[10]
i
dfA <- data[which(data$datasetAB == "A"), ] # Resample
dfB <- data[which(data$datasetAB == "B"), ] # Buckley
head(dfA)
subset <- data[which(data$species == i), ]
dfA <- data[which(data$datasetAB == "A"), ] # Resample
dfB <- data[which(data$datasetAB == "B"), ] # Buckley
dfA
i
data <- morpho_df[which(morpho_df$species %in% species_names), ]
subset <- data[which(data$species == i), ]
dfA <- subset[which(subset$datasetAB == "A"), ] # Resample
dfB <- subset[which(subset$datasetAB == "B"), ] # Buckley
length(dfA[,1])
length(dfB[,1])
sample_size <- data.frame(species = character(), resample = numeric(), buckley = numeric())
for( i in unique(data$species) ) { # i <- unique(data$species)[10]
subset <- data[which(data$species == i), ]
dfA <- subset[which(subset$datasetAB == "A"), ] # Resample
dfB <- subset[which(subset$datasetAB == "B"), ] # Buckley
sample_size <- rbind(sample_size, data.frame(species = i, resample = length(dfA[,1]), buckley = length(dfB[,1])))
}
sample_size
write.csv(sample_size, "bias-size-distrib-forams/sample_size.csv", row.names = FALSE)
write.csv(sample_size, "output/bias-size-distrib-forams/sample_size.csv", row.names = FALSE)
species_names
species_names <- species_name[-"dehiscens"]
species_names <- species_names[-"dehiscens"]
species_names <- species_names[-c("dehiscens")]
which(species_names == "dehiscens")
species_names <- species_names[-which(species_names == "dehiscens")]
species_names
data <- morpho_df[which(morpho_df$species %in% species_names), ]
sample_size <- data.frame(species = character(), resample = numeric(), buckley = numeric())
# individual
for( i in unique(data$species) ) { # i <- unique(data$species)[10]
subset <- data[which(data$species == i), ]
dfA <- subset[which(subset$datasetAB == "A"), ] # Resample
dfB <- subset[which(subset$datasetAB == "B"), ] # Buckley
sample_size <- rbind(sample_size, data.frame(species = i, resample = length(dfA[,1]), buckley = length(dfB[,1])))
write.csv(sample_size, "output/bias-size-distrib-forams/sample_size.csv", row.names = FALSE)
}
kstest <- ks.test(x=dfA$area_log, y=dfB$area_log, alternative = c("two.sided"),exact = NULL)
kstest
for( i in unique(data$species) ) { # i <- unique(data$species)[10]
subset <- data[which(data$species == i), ]
dfA <- subset[which(subset$datasetAB == "A"), ] # Resample
dfB <- subset[which(subset$datasetAB == "B"), ] # Buckley
sample_size <- rbind(sample_size, data.frame(species = i, resample = length(dfA[,1]), buckley = length(dfB[,1])))
write.csv(sample_size, "output/bias-size-distrib-forams/sample_size.csv", row.names = FALSE)
kstest <- ks.test(x=dfA$area_log, y=dfB$area_log, alternative = c("two.sided"),exact = NULL)
capture.output(kstest,file=paste("output/bias-size-distrib-forams/",i, "_kstest.txt", sep=""))
# H0: x and y were drawn from the same continuous distribution
# p-value < 0.05 : reject H0 = x and y come from different distributions
}
data <- morpho_df[which(morpho_df$species %in% species_names), ]
data_stats <- morpho_stats[which(morpho_stats$species %in% species_names), ]
list.split <- split(morpho_stats, morpho_stats$datasetAB) # split accordingly to datasetAB
colnames(list.split$A)[6:19] <- paste(colnames(list.split$A)[6:19],"A", sep = "")
colnames(list.split$B)[6:19] <- paste(colnames(list.split$B)[6:19],"B", sep = "")
morpho_statsAB <- cbind(list.split$A,list.split$B[6:19])
morpho_statsAB <- morpho_statsAB[,-4] # drop duplicate column 'datasetAB'
morpho_statsAB
morpho_stats
data_pop <- morpho_stats[which(morpho_stats$species %in% species_names), ]
data_pop[which(data_pop$datasetAB == "A")]
data_pop[which(data_pop$datasetAB == c("A"))]
str(data_pop)
data_pop[which(data_pop$datasetAB %in% c("A"))]
data_pop$datasetAB
data_pop[which(data_pop$datasetAB %in% c("A")),]
resample <- data_pop[which(data_pop$datasetAB %in% c("A")),]
buckley <- data_pop[which(data_pop$datasetAB %in% c("B")),]
plot(buckley$area_log_mean ~ resample$area_log_mean)
plot(buckley$area_log_mean ~ resample$area_log_mean)
?lm
lm(buckley$area_log_mean ~ resample$area_log_mean)
intercept <- 0
fit <- lm(I(buckley$area_log_mean - intercept) ~ 0 + resample$area_log_mean)
summary(fit)
abline(intercept, coef(fit))
abline(0,1)
plot(buckley$area_log_mean ~ resample$area_log_mean)
lm(buckley$area_log_mean ~ resample$area_log_mean)
intercept <- 0
fit <- lm(I(buckley$area_log_mean - intercept) ~ 0 + resample$area_log_mean)
summary(fit)
abline(intercept, coef(fit), col="red")
abline(0,1)
abline(0,1.046)
names(data_stats)
plot(buckley$area_log_median ~ resample$area_log_median)
intercept <- 0
fit <- lm(I(buckley$area_log_median - intercept) ~ 0 + resample$area_log_median)
summary(fit)
abline(intercept, coef(fit), col="red")
abline(0,1)
plot(buckley$area_log_95q ~ resample$area_log_95q)
intercept <- 0
fit <- lm(I(buckley$area_log_95q - intercept) ~ 0 + resample$area_log_95q)
summary(fit)
abline(intercept, coef(fit), col="red")
abline(0,1)
plot(buckley$area_log_max ~ resample$area_log_max)
intercept <- 0
fit <- lm(I(buckley$area_log_max - intercept) ~ 0 + resample$area_log_max)
summary(fit)
abline(intercept, coef(fit), col="red")
abline(0,1)
plot(buckley$area_log_max ~ resample$area_log_max, xlim=c(0,14), ylim=c(0,14))
intercept <- 0
fit <- lm(I(buckley$area_log_max - intercept) ~ 0 + resample$area_log_max)
summary(fit)
abline(intercept, coef(fit), col="red")
abline(0,1)
abline(0,1.030606)
