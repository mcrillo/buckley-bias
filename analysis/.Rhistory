labs(y = "Residuals", x = element_blank()) + ylim(ymin,ymax) +
scale_x_discrete(labels=c("Mean", "Median", "75%ile", "95%ile", "Max")) +
theme(axis.text = element_text(size=18, color = "black"),
axis.title.y = element_text(size=18, color = "black"),
legend.position="none") +
geom_label(data=data.frame(), aes(x=1:5, y=ylabel, label=round(mse[,2],rd)), colour = "black", size=6.5)
stats <- resid_list$stats
res <- res[!apply(is.na(res) | res == "", 1, all),]
# removing area_min and area_25q
res <- res[which(res$variable %!in% c(paste("area_",transf,"_min",sep=""),paste("area_",transf,"_25q",sep=""))),]
mse <- stats[which(stats[,"rownames"] %!in% c("area_min","area_25q")),c("rownames", paste("mse_",transf,sep=""))]
ggplot(data = df, aes(x=variable, y=value))+
geom_violin(trim = T, fill=alpha("grey60", 0.3), color="white") +
geom_dotplot(color = df$plasma, fill = df$plasma, binaxis = "y", stackdir = "center",
dotsize=0.6, binwidth = bin) +
# other ways to dotplot: stackgroups=TRUE, binpositions="all") +
geom_abline(intercept = 0, slope = 0, linetype = "dotted", lwd=1) +
labs(y = "Residuals", x = element_blank()) + ylim(ymin,ymax) +
scale_x_discrete(labels=c("Mean", "Median", "75%ile", "95%ile", "Max")) +
theme(axis.text = element_text(size=18, color = "black"),
axis.title.y = element_text(size=18, color = "black"),
legend.position="none") +
geom_label(data=data.frame(), aes(x=1:5, y=ylabel, label=round(mse[,2],rd)), colour = "black", size=6.5)
df <- df[with(df,order(factor(variable),values, sspname)),]
names(df)
df <- df[with(df,order(factor(variable),value, sspname)),]
ggplot(data = df, aes(x=variable, y=value))+
geom_violin(trim = T, fill=alpha("grey60", 0.3), color="white") +
geom_dotplot(color = df$plasma, fill = df$plasma, binaxis = "y", stackdir = "center",
dotsize=0.6, binwidth = bin) +
# other ways to dotplot: stackgroups=TRUE, binpositions="all") +
geom_abline(intercept = 0, slope = 0, linetype = "dotted", lwd=1) +
labs(y = "Residuals", x = element_blank()) + ylim(ymin,ymax) +
scale_x_discrete(labels=c("Mean", "Median", "75%ile", "95%ile", "Max")) +
theme(axis.text = element_text(size=18, color = "black"),
axis.title.y = element_text(size=18, color = "black"),
legend.position="none") +
geom_label(data=data.frame(), aes(x=1:5, y=ylabel, label=round(mse[,2],rd)), colour = "black", size=6.5)
min(df$value)
max(df$value)
seq(-0.5, 2.6, by = 0.1)
df$bins <- cut(df$value, breaks=seq(-0.5, 2.6, by = 0.1))
df$bins
str(df)
df <- df[with(df,order(factor(variable),bins, sspname)),]
ggplot(data = df, aes(x=variable, y=bins))+
geom_violin(trim = T, fill=alpha("grey60", 0.3), color="white") +
geom_dotplot(color = df$plasma, fill = df$plasma, binaxis = "y", stackdir = "center",
dotsize=0.6, binwidth = bin) +
# other ways to dotplot: stackgroups=TRUE, binpositions="all") +
geom_abline(intercept = 0, slope = 0, linetype = "dotted", lwd=1) +
labs(y = "Residuals", x = element_blank()) + ylim(ymin,ymax) +
scale_x_discrete(labels=c("Mean", "Median", "75%ile", "95%ile", "Max")) +
theme(axis.text = element_text(size=18, color = "black"),
axis.title.y = element_text(size=18, color = "black"),
legend.position="none") +
geom_label(data=data.frame(), aes(x=1:5, y=ylabel, label=round(mse[,2],rd)), colour = "black", size=6.5)
ggplot(data = df, aes(x=variable, y=bins))+
geom_violin(trim = T, fill=alpha("grey60", 0.3), color="white")
df$bins
mean(df$bins)
df$value
round(df$value, 1)
df <- df[with(df,order(factor(variable),bins, sspname)),]
ggplot(data = df, aes(x=variable, y=bins))+
geom_violin(trim = T, fill=alpha("grey60", 0.3), color="white") +
geom_dotplot(color = df$plasma, fill = df$plasma, binaxis = "y", stackdir = "center",
dotsize=0.6, binwidth = bin) +
# other ways to dotplot: stackgroups=TRUE, binpositions="all") +
geom_abline(intercept = 0, slope = 0, linetype = "dotted", lwd=1) +
labs(y = "Residuals", x = element_blank()) + ylim(ymin,ymax) +
scale_x_discrete(labels=c("Mean", "Median", "75%ile", "95%ile", "Max")) +
theme(axis.text = element_text(size=18, color = "black"),
axis.title.y = element_text(size=18, color = "black"),
legend.position="none") +
geom_label(data=data.frame(), aes(x=1:5, y=ylabel, label=round(mse[,2],rd)), colour = "black", size=6.5)
str(df)
df$bins <- round(df$value, 1)
df <- df[with(df,order(factor(variable),bins, sspname)),]
str(df)
ggplot(data = df, aes(x=variable, y=bins))+
geom_violin(trim = T, fill=alpha("grey60", 0.3), color="white") +
geom_dotplot(color = df$plasma, fill = df$plasma, binaxis = "y", stackdir = "center",
dotsize=0.6, binwidth = bin) +
# other ways to dotplot: stackgroups=TRUE, binpositions="all") +
geom_abline(intercept = 0, slope = 0, linetype = "dotted", lwd=1) +
labs(y = "Residuals", x = element_blank()) + ylim(ymin,ymax) +
scale_x_discrete(labels=c("Mean", "Median", "75%ile", "95%ile", "Max")) +
theme(axis.text = element_text(size=18, color = "black"),
axis.title.y = element_text(size=18, color = "black"),
legend.position="none") +
geom_label(data=data.frame(), aes(x=1:5, y=ylabel, label=round(mse[,2],rd)), colour = "black", size=6.5)
df$bins <- round(df$value, 1)
df <- df[with(df,order(factor(variable),bins, sspname)),]
bin = 0.9
ggplot(data = df, aes(x=variable, y=bins))+
geom_violin(trim = T, fill=alpha("grey60", 0.3), color="white") +
geom_dotplot(color = df$plasma, fill = df$plasma, binaxis = "y", stackdir = "center",
dotsize=0.6, binwidth = bin) +
# other ways to dotplot: stackgroups=TRUE, binpositions="all") +
geom_abline(intercept = 0, slope = 0, linetype = "dotted", lwd=1) +
labs(y = "Residuals", x = element_blank()) + ylim(ymin,ymax) +
scale_x_discrete(labels=c("Mean", "Median", "75%ile", "95%ile", "Max")) +
theme(axis.text = element_text(size=18, color = "black"),
axis.title.y = element_text(size=18, color = "black"),
legend.position="none") +
geom_label(data=data.frame(), aes(x=1:5, y=ylabel, label=round(mse[,2],rd)), colour = "black", size=6.5)
df$bins <- round(df$value, 1)
df <- df[with(df,order(factor(variable),bins, sspname)),]
bin = 0.09
ggplot(data = df, aes(x=variable, y=bins))+
geom_violin(trim = T, fill=alpha("grey60", 0.3), color="white") +
geom_dotplot(color = df$plasma, fill = df$plasma, binaxis = "y", stackdir = "center",
dotsize=0.6, binwidth = bin) +
# other ways to dotplot: stackgroups=TRUE, binpositions="all") +
geom_abline(intercept = 0, slope = 0, linetype = "dotted", lwd=1) +
labs(y = "Residuals", x = element_blank()) + ylim(ymin,ymax) +
scale_x_discrete(labels=c("Mean", "Median", "75%ile", "95%ile", "Max")) +
theme(axis.text = element_text(size=18, color = "black"),
axis.title.y = element_text(size=18, color = "black"),
legend.position="none") +
geom_label(data=data.frame(), aes(x=1:5, y=ylabel, label=round(mse[,2],rd)), colour = "black", size=6.5)
str(res)
arrange(df, factor(variable), bins, desc(sspname))
df <- arrange(df, factor(variable), bins, desc(sspname))
ggplot(data = df, aes(x=variable, y=bins))+
geom_violin(trim = T, fill=alpha("grey60", 0.3), color="white") +
geom_dotplot(color = df$plasma, fill = df$plasma, binaxis = "y", stackdir = "center",
dotsize=0.6, binwidth = bin) +
# other ways to dotplot: stackgroups=TRUE, binpositions="all") +
geom_abline(intercept = 0, slope = 0, linetype = "dotted", lwd=1) +
labs(y = "Residuals", x = element_blank()) + ylim(ymin,ymax) +
scale_x_discrete(labels=c("Mean", "Median", "75%ile", "95%ile", "Max")) +
theme(axis.text = element_text(size=18, color = "black"),
axis.title.y = element_text(size=18, color = "black"),
legend.position="none") +
geom_label(data=data.frame(), aes(x=1:5, y=ylabel, label=round(mse[,2],rd)), colour = "black", size=6.5)
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/PhD/Projects")
setwd("./buckley-bias/analysis")
# Libraries
source("R/library.R")
# Auxiliary functions
sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
# General data
buckley_measurmts <- read.csv(file=c("data/buckley_measurmts.csv"), header = TRUE, stringsAsFactors = FALSE)
wands_df <- read.csv("data/Wandsworth_loans_MRillo.csv", header = TRUE, stringsAsFactors=FALSE)
resamples_df <- suppressWarnings(get_resamples_info(buckley_measurmts, wands_df, overwrite = T)) # creates: data/resample_info.csv & data/resample_info_morpho.csv
resamp_size_df <- read.csv("data/resample_info_size.csv", header = TRUE, stringsAsFactors=FALSE)
plot_map_resamples(resamples_df, overwrite = FALSE) # creates: output/resamples_map.pdf
### Data
# Creates files in data/bias_size_analysis
get_size_data(buckley_measurmts, resamp_size_df, overwrite = F)
# Merges csv files from bias_size_analysis into one data.frame: bias_size_analysis.csv
size_ind_df <- merge_size_data(overwrite = F)
size_pop_df <- get_size_pop_data(size_ind_df, overwrite = F) # summary statistics for each ssp population of size_ind_df
# Re-ordering the factors (species) to be phylogenetically meaningful in the plot (i.e. sister species closer in the plot)
# size_pop_df$species <- factor(size_pop_df$species, levels = c())
### Analysis & Plots
### Individuals
boxplot_size_species(size_ind_df, overwrite = F)
boxplot_size_sample(size_ind_df, overwrite = F)
plot_size_histograms(size_ind_df, overwrite = F)
# test_size_ind(size_ind_df)
### Analysis & Plots
### Individuals
transf<- c("log") # "sqrt"
# Regression plots (mean, median, 75q, 95q max)
regress <- dcast(size_pop_df, sspname+sample~datasetAB, value.var = paste("area_",transf,"_95q",sep=""))
plot95q <- plot_resid_regression(regress, tranfs, overwrite=T)
# Calculates residuals from regression based on 1:1 model
resid_list <- get_size_pop_residuals(size_pop_df, file_name = "size_pop_residuals_allssp", overwrite = F)
# resid_list$stats[which.min(resid_list$stats[,paste("mse_",transf,sep="")]),"rownames"]
# Preparing data for residual plots & plots
res <- melt(as.data.frame(resid_list[[transf]]), id = c("species","sspname","sample")) # warning ok
plot_resid_histogram(res, transf, overwrite = F)
violin <- plot_resid_violin(res, resid_list$stats, transf, overwrite = T)
# Plot for publication
# Uses violin and plot95q - so set overwrite to TRUE to run the plot below
pdf(file = "output/ggarrange.pdf", paper = "special", width=15, height=6)
print(ggarrange(violin, plot95q, ncol = 2, nrow = 1, align="h", widths = c(0.45, 0.55))) # labels = c("(a)", "(b)"), font.label = list(size = 18, color = "black", face = "bold", family = NULL)))
dev.off()
dev.off()
dev.off()
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/PhD/Projects")
setwd("./buckley-bias/analysis")
# Libraries
source("R/library.R")
# Auxiliary functions
sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
# General data
buckley_measurmts <- read.csv(file=c("data/buckley_measurmts.csv"), header = TRUE, stringsAsFactors = FALSE)
wands_df <- read.csv("data/Wandsworth_loans_MRillo.csv", header = TRUE, stringsAsFactors=FALSE)
resamples_df <- suppressWarnings(get_resamples_info(buckley_measurmts, wands_df, overwrite = T)) # creates: data/resample_info.csv & data/resample_info_morpho.csv
resamp_size_df <- read.csv("data/resample_info_size.csv", header = TRUE, stringsAsFactors=FALSE)
plot_map_resamples(resamples_df, overwrite = FALSE) # creates: output/resamples_map.pdf
dev.off()
### Data
# Creates files in data/bias_size_analysis
get_size_data(buckley_measurmts, resamp_size_df, overwrite = F)
# Merges csv files from bias_size_analysis into one data.frame: bias_size_analysis.csv
size_ind_df <- merge_size_data(overwrite = F)
size_pop_df <- get_size_pop_data(size_ind_df, overwrite = F) # summary statistics for each ssp population of size_ind_df
# Re-ordering the factors (species) to be phylogenetically meaningful in the plot (i.e. sister species closer in the plot)
# size_pop_df$species <- factor(size_pop_df$species, levels = c())
### Analysis & Plots
### Individuals
boxplot_size_species(size_ind_df, overwrite = F)
boxplot_size_sample(size_ind_df, overwrite = F)
plot_size_histograms(size_ind_df, overwrite = F)
# test_size_ind(size_ind_df)
### Analysis & Plots
### Individuals
transf<- c("log") # "sqrt"
# Regression plots (mean, median, 75q, 95q max)
regress <- dcast(size_pop_df, sspname+sample~datasetAB, value.var = paste("area_",transf,"_95q",sep=""))
plot95q <- plot_resid_regression(regress, tranfs, name="95q", overwrite=T)
# Calculates residuals from regression based on 1:1 model
resid_list <- get_size_pop_residuals(size_pop_df, file_name = "size_pop_residuals_allssp", overwrite = F)
# resid_list$stats[which.min(resid_list$stats[,paste("mse_",transf,sep="")]),"rownames"]
# Preparing data for residual plots & plots
res <- melt(as.data.frame(resid_list[[transf]]), id = c("species","sspname","sample")) # warning ok
plot_resid_histogram(res, transf, overwrite = F)
violin <- plot_resid_violin(res, resid_list$stats, transf, overwrite = T)
# Plot for publication
# Uses violin and plot95q - so set overwrite to TRUE to run the plot below
pdf(file = "output/ggarrange.pdf", paper = "special", width=15, height=6)
print(ggarrange(violin, plot95q, ncol = 2, nrow = 1, align="h", widths = c(0.45, 0.55))) # labels = c("(a)", "(b)"), font.label = list(size = 18, color = "black", face = "bold", family = NULL)))
dev.off()
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/PhD/Projects")
setwd("./buckley-bias/analysis")
# Libraries
source("R/library.R")
# Auxiliary functions
sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
# General data
buckley_measurmts <- read.csv(file=c("data/buckley_measurmts.csv"), header = TRUE, stringsAsFactors = FALSE)
wands_df <- read.csv("data/Wandsworth_loans_MRillo.csv", header = TRUE, stringsAsFactors=FALSE)
resamples_df <- suppressWarnings(get_resamples_info(buckley_measurmts, wands_df, overwrite = T)) # creates: data/resample_info.csv & data/resample_info_morpho.csv
resamp_size_df <- read.csv("data/resample_info_size.csv", header = TRUE, stringsAsFactors=FALSE)
plot_map_resamples(resamples_df, overwrite = FALSE) # creates: output/resamples_map.pdf
### Data
# Creates files in data/bias_size_analysis
get_size_data(buckley_measurmts, resamp_size_df, overwrite = F)
# Merges csv files from bias_size_analysis into one data.frame: bias_size_analysis.csv
size_ind_df <- merge_size_data(overwrite = F)
size_pop_df <- get_size_pop_data(size_ind_df, overwrite = F) # summary statistics for each ssp population of size_ind_df
# Re-ordering the factors (species) to be phylogenetically meaningful in the plot (i.e. sister species closer in the plot)
# size_pop_df$species <- factor(size_pop_df$species, levels = c())
### Analysis & Plots
### Individuals
boxplot_size_species(size_ind_df, overwrite = F)
boxplot_size_sample(size_ind_df, overwrite = F)
plot_size_histograms(size_ind_df, overwrite = F)
# test_size_ind(size_ind_df)
### Analysis & Plots
### Individuals
transf<- c("log") # "sqrt"
# Regression plots (mean, median, 75q, 95q max)
regress <- dcast(size_pop_df, sspname+sample~datasetAB, value.var = paste("area_",transf,"_95q",sep=""))
plot95q <- plot_resid_regression(regress, tranfs, name="95q", overwrite=T)
# Calculates residuals from regression based on 1:1 model
resid_list <- get_size_pop_residuals(size_pop_df, file_name = "size_pop_residuals_allssp", overwrite = F)
# resid_list$stats[which.min(resid_list$stats[,paste("mse_",transf,sep="")]),"rownames"]
# Preparing data for residual plots & plots
res <- melt(as.data.frame(resid_list[[transf]]), id = c("species","sspname","sample")) # warning ok
plot_resid_histogram(res, transf, overwrite = F)
violin <- plot_resid_violin(res, resid_list$stats, transf, overwrite = T)
# Plot for publication
# Uses violin and plot95q - so set overwrite to TRUE to run the plot below
pdf(file = "output/ggarrange.pdf", paper = "special", width=15, height=6)
print(ggarrange(violin, plot95q, ncol = 2, nrow = 1, align="h", widths = c(0.45, 0.55))) # labels = c("(a)", "(b)"), font.label = list(size = 18, color = "black", face = "bold", family = NULL)))
dev.off()
pdf(file = "output/ggarrange.pdf", paper = "special", width=15, height=6)
print(ggarrange(violin, plot95q, ncol = 2, nrow = 1, align="h", widths = c(0.45, 0.55)), labels = c("(a)", "(b)"), font.label = list(size = 16, color = "black", face = "bold", family = NULL)))
dev.off()
# Uses violin and plot95q - so set overwrite to TRUE to run the plot below
pdf(file = "output/manuscript_ggarrange.pdf", paper = "special", width=15, height=6)
print(ggarrange(violin, plot95q, ncol = 2, nrow = 1, align="h", widths = c(0.45, 0.55), labels = c("(a)", "(b)"), font.label = list(size = 16, color = "black", face = "bold", family = NULL)))
dev.off()
pdf(file = "output/manuscript_ggarrange.pdf", paper = "special", width=15, height=6)
print(ggarrange(violin, plot95q, ncol = 2, nrow = 1, align="h", widths = c(0.45, 0.55),
labels = c("(a)", "(b)"), label.x = c(-1,-1),
font.label = list(size = 16, color = "black", face = "bold", family = NULL)))
dev.off()
# Uses violin and plot95q - so set overwrite to TRUE to run the plot below
pdf(file = "output/manuscript_ggarrange.pdf", paper = "special", width=15, height=6)
print(ggarrange(violin, plot95q, ncol = 2, nrow = 1, align="h", widths = c(0.45, 0.55),
labels = c("(a)", "(b)"), label.x = c(-0.1,-0.1),
font.label = list(size = 16, color = "black", face = "bold", family = NULL)))
dev.off()
# Uses violin and plot95q - so set overwrite to TRUE to run the plot below
pdf(file = "output/manuscript_ggarrange.pdf", paper = "special", width=15, height=6)
print(ggarrange(violin, plot95q, ncol = 2, nrow = 1, align="h", widths = c(0.45, 0.55),
labels = c("(a)", "(b)"), label.x = c(-0,-0.001),
font.label = list(size = 16, color = "black", face = "bold", family = NULL)))
dev.off()
# Uses violin and plot95q - so set overwrite to TRUE to run the plot below
pdf(file = "output/manuscript_ggarrange.pdf", paper = "special", width=15, height=6)
print(ggarrange(violin, plot95q, ncol = 2, nrow = 1, align="h", widths = c(0.45, 0.55),
labels = c("(a)", "(b)"), label.x = c(-0,-0.01),
font.label = list(size = 16, color = "black", face = "bold", family = NULL)))
dev.off()
# Plot for publication
# Uses violin and plot95q - so set overwrite to TRUE to run the plot below
pdf(file = "output/manuscript_ggarrange.pdf", paper = "special", width=15, height=6)
print(ggarrange(violin, plot95q, ncol = 2, nrow = 1, align="h", widths = c(0.45, 0.55),
labels = c("(a)", "(b)"), label.x = c(-0.01,-0.01),
font.label = list(size = 20, color = "black", face = "bold", family = NULL)))
dev.off()
# Uses violin and plot95q - so set overwrite to TRUE to run the plot below
pdf(file = "output/manuscript_ggarrange.pdf", paper = "special", width=15, height=6)
print(ggarrange(violin, plot95q, ncol = 2, nrow = 1, align="h", widths = c(0.45, 0.55),
labels = c("(a)", "(b)"), label.x = c(0,-0.009),
font.label = list(size = 20, color = "black", face = "bold", family = NULL)))
dev.off()
# Plot for publication
# Uses violin and plot95q - so set overwrite to TRUE to run the plot below
pdf(file = "output/manuscript_ggarrange.pdf", paper = "special", width=15, height=6)
print(ggarrange(violin, plot95q, ncol = 2, nrow = 1, align="h", widths = c(0.45, 0.55),
labels = c("(a)", "(b)"), label.x = c(-0.008,-0.011),
font.label = list(size = 18, color = "black", face = "bold", family = NULL)))
dev.off()
# Uses violin and plot95q - so set overwrite to TRUE to run the plot below
pdf(file = "output/manuscript_ggarrange.pdf", paper = "special", width=15, height=6)
print(ggarrange(violin, plot95q, ncol = 2, nrow = 1, align="h", widths = c(0.45, 0.55),
labels = c("(a)", "(b)"), label.x = c(-0.005,-0.011),
font.label = list(size = 18, color = "black", face = "bold", family = NULL)))
dev.off()
# Uses violin and plot95q - so set overwrite to TRUE to run the plot below
pdf(file = "output/manuscript_ggarrange.pdf", paper = "special", width=15, height=6)
print(ggarrange(violin, plot95q, ncol = 2, nrow = 1, align="h", widths = c(0.45, 0.55),
labels = c("(a)", "(b)"), label.x = c(0,-0.011),
font.label = list(size = 18, color = "black", face = "bold", family = NULL)))
dev.off()
# Uses violin and plot95q - so set overwrite to TRUE to run the plot below
pdf(file = "output/manuscript_ggarrange.pdf", paper = "special", width=15, height=6)
print(ggarrange(violin, plot95q, ncol = 2, nrow = 1, align="h", widths = c(0.45, 0.55),
labels = c("(a)", "(b)"), label.x = c(-0.005,-0.013),
font.label = list(size = 18, color = "black", face = "bold", family = NULL)))
dev.off()
# Uses violin and plot95q - so set overwrite to TRUE to run the plot below
pdf(file = "output/manuscript_ggarrange.pdf", paper = "special", width=15, height=6)
print(ggarrange(violin, plot95q, ncol = 2, nrow = 1, align="h", widths = c(0.45, 0.55),
labels = c("(a)", "(b)"), label.x = c(-0.002,-0.013),
font.label = list(size = 18, color = "black", face = "bold", family = NULL)))
dev.off()
# Uses violin and plot95q - so set overwrite to TRUE to run the plot below
pdf(file = "output/manuscript_ggarrange.pdf", paper = "special", width=15, height=6)
print(ggarrange(violin, plot95q, ncol = 2, nrow = 1, align="h", widths = c(0.45, 0.55),
labels = c("(a)", "(b)"), label.x = c(0,-0.013),
font.label = list(size = 18, color = "black", face = "bold", family = NULL)))
dev.off()
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/PhD/Projects")
setwd("./buckley-bias/analysis")
# Libraries
source("R/library.R")
# Auxiliary functions
sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
# General data
buckley_measurmts <- read.csv(file=c("data/buckley_measurmts.csv"), header = TRUE, stringsAsFactors = FALSE)
wands_df <- read.csv("data/Wandsworth_loans_MRillo.csv", header = TRUE, stringsAsFactors=FALSE)
resamples_df <- suppressWarnings(get_resamples_info(buckley_measurmts, wands_df, overwrite = T)) # creates: data/resample_info.csv & data/resample_info_morpho.csv
resamp_size_df <- read.csv("data/resample_info_size.csv", header = TRUE, stringsAsFactors=FALSE)
plot_map_resamples(resamples_df, overwrite = FALSE) # creates: output/resamples_map.pdf
### Data
# Creates files in data/bias_size_analysis
get_size_data(buckley_measurmts, resamp_size_df, overwrite = F)
# Merges csv files from bias_size_analysis into one data.frame: bias_size_analysis.csv
size_ind_df <- merge_size_data(overwrite = F)
size_pop_df <- get_size_pop_data(size_ind_df, overwrite = F) # summary statistics for each ssp population of size_ind_df
# Re-ordering the factors (species) to be phylogenetically meaningful in the plot (i.e. sister species closer in the plot)
# size_pop_df$species <- factor(size_pop_df$species, levels = c())
### Analysis & Plots
### Individuals
boxplot_size_species(size_ind_df, overwrite = F)
boxplot_size_sample(size_ind_df, overwrite = F)
plot_size_histograms(size_ind_df, overwrite = F)
# test_size_ind(size_ind_df)
### Analysis & Plots
### Individuals
transf<- c("log") # "sqrt"
# checking order of sspnames by max area_log_95q, for colours gradient
size <- by(size_pop_df$area_log_95q, size_pop_df$sspname, max)
size <- sort(size, decreasing = TRUE)
names(size)
# Regression plots (mean, median, 75q, 95q max)
regress <- dcast(size_pop_df, sspname+sample~datasetAB, value.var = paste("area_",transf,"_95q",sep=""))
plot95q <- plot_resid_regression(regress, tranfs, name="95q", overwrite=F)
# Calculates residuals from regression based on 1:1 model
resid_list <- get_size_pop_residuals(size_pop_df, file_name = "size_pop_residuals_allssp", overwrite = F)
# resid_list$stats[which.min(resid_list$stats[,paste("mse_",transf,sep="")]),"rownames"]
# Preparing data for residual plots & plots
res <- melt(as.data.frame(resid_list[[transf]]), id = c("species","sspname","sample")) # warning ok
plot_resid_histogram(res, transf, overwrite = F)
violin <- plot_resid_violin(res, resid_list$stats, transf, overwrite = F)
violin
str(violin)
is.na(violin)
length(violin)
is.null(violin)
!is.null(violin)
!is.null(violin) & !is.null(plot95q)
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/PhD/Projects")
setwd("./buckley-bias/analysis")
# Libraries
source("R/library.R")
# Auxiliary functions
sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
# General data
buckley_measurmts <- read.csv(file=c("data/buckley_measurmts.csv"), header = TRUE, stringsAsFactors = FALSE)
wands_df <- read.csv("data/Wandsworth_loans_MRillo.csv", header = TRUE, stringsAsFactors=FALSE)
resamples_df <- suppressWarnings(get_resamples_info(buckley_measurmts, wands_df, overwrite = T)) # creates: data/resample_info.csv & data/resample_info_morpho.csv
resamp_size_df <- read.csv("data/resample_info_size.csv", header = TRUE, stringsAsFactors=FALSE)
plot_map_resamples(resamples_df, overwrite = FALSE) # creates: output/resamples_map.pdf
### Data
# Creates files in data/bias_size_analysis
get_size_data(buckley_measurmts, resamp_size_df, overwrite = F)
# Merges csv files from bias_size_analysis into one data.frame: bias_size_analysis.csv
size_ind_df <- merge_size_data(overwrite = F)
size_pop_df <- get_size_pop_data(size_ind_df, overwrite = F) # summary statistics for each ssp population of size_ind_df
# Re-ordering the factors (species) to be phylogenetically meaningful in the plot (i.e. sister species closer in the plot)
# size_pop_df$species <- factor(size_pop_df$species, levels = c())
### Analysis & Plots
### Individuals
boxplot_size_species(size_ind_df, overwrite = F)
boxplot_size_sample(size_ind_df, overwrite = F)
plot_size_histograms(size_ind_df, overwrite = F)
# test_size_ind(size_ind_df)
### Analysis & Plots
### Individuals
transf<- c("log") # "sqrt"
# checking order of sspnames by max area_log_95q, for colours gradient
size <- by(size_pop_df$area_log_95q, size_pop_df$sspname, max)
size <- sort(size, decreasing = TRUE)
# names(size)
# Regression plots (mean, median, 75q, 95q max)
regress <- dcast(size_pop_df, sspname+sample~datasetAB, value.var = paste("area_",transf,"_95q",sep=""))
plot95q <- plot_resid_regression(regress, tranfs, name="95q", overwrite=F)
# Calculates residuals from regression based on 1:1 model
resid_list <- get_size_pop_residuals(size_pop_df, file_name = "size_pop_residuals_allssp", overwrite = F)
# resid_list$stats[which.min(resid_list$stats[,paste("mse_",transf,sep="")]),"rownames"]
# Preparing data for residual plots & plots
res <- melt(as.data.frame(resid_list[[transf]]), id = c("species","sspname","sample")) # warning ok
plot_resid_histogram(res, transf, overwrite = F)
violin <- plot_resid_violin(res, resid_list$stats, transf, overwrite = F)
# Plot for publication
# Uses violin and plot95q - so set overwrite to TRUE to run the plot below
if (!is.null(violin) & !is.null(plot95q)){
pdf(file = "output/manuscript_ggarrange.pdf", paper = "special", width=15, height=6)
print(ggarrange(violin, plot95q, ncol = 2, nrow = 1, align="h", widths = c(0.45, 0.55),
labels = c("(a)", "(b)"), label.x = c(0,-0.013),
font.label = list(size = 18, color = "black", face = "bold", family = NULL)))
dev.off()
}
rm(list=ls())
setwd("/Users/marinacostarillo/Google Drive/PhD/Projects")
setwd("./buckley-bias/analysis")
# Libraries
source("R/library.R")
# Auxiliary functions
sourceDirectory("./R/aux_functions", modifiedOnly=FALSE)
# General data
buckley_measurmts <- read.csv(file=c("data/buckley_measurmts.csv"), header = TRUE, stringsAsFactors = FALSE)
wands_df <- read.csv("data/Wandsworth_loans_MRillo.csv", header = TRUE, stringsAsFactors=FALSE)
resamples_df <- suppressWarnings(get_resamples_info(buckley_measurmts, wands_df, overwrite = T)) # creates: data/resample_info.csv & data/resample_info_morpho.csv
resamp_size_df <- read.csv("data/resample_info_size.csv", header = TRUE, stringsAsFactors=FALSE)
plot_map_resamples(resamples_df, overwrite = FALSE) # creates: output/resamples_map.pdf
### Data
# Creates files in data/bias_size_analysis
get_size_data(buckley_measurmts, resamp_size_df, overwrite = F)
# Merges csv files from bias_size_analysis into one data.frame: bias_size_analysis.csv
size_ind_df <- merge_size_data(overwrite = F)
size_pop_df <- get_size_pop_data(size_ind_df, overwrite = F) # summary statistics for each ssp population of size_ind_df
# Re-ordering the factors (species) to be phylogenetically meaningful in the plot (i.e. sister species closer in the plot)
# size_pop_df$species <- factor(size_pop_df$species, levels = c())
### Analysis & Plots
### Individuals
boxplot_size_species(size_ind_df, overwrite = F)
boxplot_size_sample(size_ind_df, overwrite = F)
plot_size_histograms(size_ind_df, overwrite = F)
# test_size_ind(size_ind_df)
### Analysis & Plots
### Individuals
transf<- c("log") # "sqrt"
# checking order of sspnames by max area_log_95q, for colours gradient
size <- by(size_pop_df$area_log_95q, size_pop_df$sspname, max)
size <- sort(size, decreasing = TRUE)
# names(size)
# Regression plots (mean, median, 75q, 95q max)
regress <- dcast(size_pop_df, sspname+sample~datasetAB, value.var = paste("area_",transf,"_95q",sep=""))
plot95q <- plot_resid_regression(regress, tranfs, name="95q", overwrite=F)
# Calculates residuals from regression based on 1:1 model
resid_list <- get_size_pop_residuals(size_pop_df, file_name = "size_pop_residuals_allssp", overwrite = F)
# resid_list$stats[which.min(resid_list$stats[,paste("mse_",transf,sep="")]),"rownames"]
# Preparing data for residual plots & plots
res <- melt(as.data.frame(resid_list[[transf]]), id = c("species","sspname","sample")) # warning ok
plot_resid_histogram(res, transf, overwrite = F)
violin <- plot_resid_violin(res, resid_list$stats, transf, overwrite = F)
# Plot for publication
# Uses violin and plot95q - so set overwrite to TRUE to run the plot below
if (!is.null(violin) & !is.null(plot95q)){
pdf(file = "output/manuscript_ggarrange.pdf", paper = "special", width=15, height=6)
print(ggarrange(violin, plot95q, ncol = 2, nrow = 1, align="h", widths = c(0.45, 0.55),
labels = c("(a)", "(b)"), label.x = c(0,-0.013),
font.label = list(size = 18, color = "black", face = "bold", family = NULL)))
dev.off()
}
